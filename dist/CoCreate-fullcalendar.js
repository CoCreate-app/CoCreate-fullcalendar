/*! For license information please see CoCreate-fullcalendar.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.fullcalendar=F())}(this,(function(){return(()=>{var __webpack_modules__={"../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/common-fun.js":function(module,exports){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        \treturn factory(window)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== \'undefined\' ? self : this, function (wnd) {\n  function getCommonParams() \n  {\n    let config = {};\n    if (wnd && wnd.config) {\n      config = wnd.config\n    }\n    \n    return {\n      "apiKey":           config.apiKey,\n      "securityKey":      config.securityKey,\n      "organization_id":  config.organization_Id,\n    }\n  }\n  \n  function getCommonParamsExtend(info) \n  {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config\n    \n    return {\n      "apiKey":           info.apiKey || config.apiKey,\n      "securityKey":      info.securityKey || config.securityKey,\n      "organization_id":  info.organization_id || config.organization_Id,\n    }\n  }\n  \n  function generateSocketClient (namespace, room) \n  {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config\n    \n    let ns = namespace || config.organization_Id\n    let rr = room || \'\';\n    if (rr) {\n      return `${ns}/${rr}`\n    } else {\n      return ns;\n    }\n  }\n  \n  return {getCommonParams, getCommonParamsExtend, generateSocketClient};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5mdWxsY2FsZW5kYXIvLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkLWNsaWVudC9ub2RlX21vZHVsZXMvQGNvY3JlYXRlL3NvY2tldC1jbGllbnQvc3JjL2NvbW1vbi1mdW4uanM/YTVkOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFFBQVEsSUFBMEM7QUFDbEQ7QUFDQSxRQUFRLGlDQUFPLEVBQUUsbUNBQUU7QUFDbkI7QUFDQSxTQUFTO0FBQUEsa0dBQUM7QUFDVixLQUFLLE1BQU0sRUFRUjtBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7QUFDekIsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1YsQ0FBQyIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLWNydWQtY2xpZW50L25vZGVfbW9kdWxlcy9AY29jcmVhdGUvc29ja2V0LWNsaWVudC9zcmMvY29tbW9uLWZ1bi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuICAgICAgICBcdHJldHVybiBmYWN0b3J5KHdpbmRvdylcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIHJvb3QucmV0dXJuRXhwb3J0cyA9IGZhY3Rvcnkod2luZG93KTtcbiAgfVxufSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24gKHduZCkge1xuICBmdW5jdGlvbiBnZXRDb21tb25QYXJhbXMoKSBcbiAge1xuICAgIGxldCBjb25maWcgPSB7fTtcbiAgICBpZiAod25kICYmIHduZC5jb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHduZC5jb25maWdcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIFwiYXBpS2V5XCI6ICAgICAgICAgICBjb25maWcuYXBpS2V5LFxuICAgICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICAgIH1cbiAgfVxuICBcbiAgZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kKGluZm8pIFxuICB7XG4gICAgbGV0IGNvbmZpZyA9IHt9O1xuICAgIGlmICh3bmQgJiYgd25kLmNvbmZpZykgY29uZmlnID0gd25kLmNvbmZpZ1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBcImFwaUtleVwiOiAgICAgICAgICAgaW5mby5hcGlLZXkgfHwgY29uZmlnLmFwaUtleSxcbiAgICAgIFwic2VjdXJpdHlLZXlcIjogICAgICBpbmZvLnNlY3VyaXR5S2V5IHx8IGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBpbmZvLm9yZ2FuaXphdGlvbl9pZCB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICAgIH1cbiAgfVxuICBcbiAgZnVuY3Rpb24gZ2VuZXJhdGVTb2NrZXRDbGllbnQgKG5hbWVzcGFjZSwgcm9vbSkgXG4gIHtcbiAgICBsZXQgY29uZmlnID0ge307XG4gICAgaWYgKHduZCAmJiB3bmQuY29uZmlnKSBjb25maWcgPSB3bmQuY29uZmlnXG4gICAgXG4gICAgbGV0IG5zID0gbmFtZXNwYWNlIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWRcbiAgICBsZXQgcnIgPSByb29tIHx8ICcnO1xuICAgIGlmIChycikge1xuICAgICAgcmV0dXJuIGAke25zfS8ke3JyfWBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5zO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHtnZXRDb21tb25QYXJhbXMsIGdldENvbW1vblBhcmFtc0V4dGVuZCwgZ2VuZXJhdGVTb2NrZXRDbGllbnR9O1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/common-fun.js\n')},"../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/index.js":function(module,exports){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        \treturn factory(window, WebSocket, Blob)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== 'undefined' ? self : this, function (wnd, WebSocket, Blob) {\n\n    class CoCreateSocketClient\n\t{\n\t\tconstructor(prefix = \"crud\") {\n\t\t\tthis.prefix = prefix || \"crud\";\n\t\t\tthis.sockets = new Map();\n\t\t\tthis.listeners = new Map();\n\t\t\tthis.messageQueue =  new Map();\n\t\t\tthis.saveFileName =  '';\n\t\t\tthis.globalScope =  \"\";\n\t\t}\n\t\n\t\tsetGlobalScope(scope) {\n\t\t\tthis.globalScope = `${this.prefix}/${scope}`;\n\t\t}\n\t\t\n\t\tgetGlobalScope() {\n\t\t\treturn this.globalScope;\n\t\t}\n\t\t\n\t\t/**\n\t\t * config: {namespace, room, host}\n\t\t */\n\t\tcreate (config) {\n\t\t\t\n\t\t\tconst {namespace, room} = config;\n\t\t\tconst key = this.getKey(namespace, room);\n\t\t\tlet _this = this;\n\t\t\tif (namespace) {\n\t\t\t\tthis.setGlobalScope(namespace)\n\t\t\t}\n\t\t\t\n\t\t\tlet socket;\n\t\t\tif (this.sockets.get(key)) {\n\t\t\t\tsocket = this.sockets.get(key);\n\t\t\t\tconsole.log('SOcket already has been register');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tlet w_protocol = wnd.location.protocol;\t\t\n\t\t\tif (wnd.location.protocol === \"about:\") {\n\t\t\t\tw_protocol = wnd.parent.location.protocol;\n\t\t\t}\n\t\t\tlet protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n\t\t\t\n\t\t\tconst port = config.port ? config.port : 8088;\n\t\t\t\n\t\t\tlet socket_url = `${protocol}://${wnd.location.host}:${port}/${key}`;\n\t\t\t\n\t\t\tif (config.host) {\n\t\t\t\tif (config.host.includes(\"://\")) {\n\t\t\t\t\tsocket_url = `${config.host}/${key}`;\n\t\t\t\t} else {\n\t\t\t\t\tif (config.host.includes(\":\")) {\n\t\t\t\t\t\tsocket_url = `${protocol}://${config.host}/${key}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsocket_url = `${protocol}://${config.host}:${port}/${key}`;\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tsocket = new WebSocket(socket_url);\n\t\t\t} catch(error) {\n\t\t\t\tconsole.log(error)\n\t\t\t}\n\n\t\t\tsocket.onopen = function(event) {\n\t\t\t\tconst messages = _this.messageQueue.get(key) || [];\n\t\t\t\tmessages.forEach(msg => socket.send(JSON.stringify(msg)));\n\t\t\t\t\n\t\t\t\t_this.sockets.set(key, socket);\n\t\t\t\t_this.messageQueue.set(key, []);\n\t\t\t}\n\t\t\t\n\t\t\tsocket.onclose = function(event) {\n\t\t\t\tswitch(event.code) {\n\t\t\t\t\tcase 1000: // close normal\n\t\t\t\t\t\tconsole.log(\"websocket: closed\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: \n\t\t\t\t\t\t_this.destroy(socket, key);\n\t\t\t\t\t\t_this.reconnect(socket, config);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsocket.onerror = function(err) {\n\t\t\t\t_this.destroy(socket, key);\n\t\t\t\t_this.reconnect(socket, config);\n\t\t\t}\n\t\n\t\t\tsocket.onmessage = function(data) {\n\t\t\t\ttry {\n\t\t\t\t\tif (wnd.Blob) {\n\t\t\t\t\t\tif (data.data instanceof Blob) {\n\t\t\t\t\t\t\t_this.saveFile(data.data);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet rev_data = JSON.parse(data.data);\n\n\t\t\t\t\tif (rev_data.data.event) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (wnd.CustomEvent) {\n\t\t\t\t\t\t\tvar event = new wnd.CustomEvent(rev_data.data.event, {\n\t\t\t\t\t\t\t\tdetail: rev_data.data\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\twnd.document.dispatchEvent(event);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocess.emit(rev_data.data.event, rev_data.data)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tlet action = rev_data.action;\n\t\t\t\t\tconst listeners = _this.listeners.get(rev_data.action);\n\t\t\t\t\tif (!listeners) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlisteners.forEach(listener => {\n\t\t\t\t\t\tlistener(rev_data.data, key);\n\t\t\t\t\t})\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * \n\t\t */\n\t\tsend (action, data, room) {\n\t\t\tconst obj = {\n\t\t\t\taction: action,\n\t\t\t\tdata: data\n\t\t\t}\n\t\t\tconst key = this.getKeyByRoom(room);\n\t\t\tconst socket = this.getByRoom(room);\n\n\t\t\tif (socket) {\n\t\t\t\tsocket.send(JSON.stringify(obj));\n\t\t\t} else {\n\t\t\t\tif (this.messageQueue.get(key)) {\n\t\t\t\t\tthis.messageQueue.get(key).push(obj);\n\t\t\t\t} else {\n\t\t\t\t\tthis.messageQueue.set(key, [obj]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsendFile (file, room) {\n\t\t\tconst socket = this.getByRoom(room);\n\t\t\tif (socket) {\n\t\t\t\tsocket.send(file);\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * scope: ns/room\n\t\t */\n\t\tlisten(type, callback) {\n\t\t\tif (!this.listeners.get(type)) {\n\t\t\t\tthis.listeners.set(type, [callback]);\n\t\t\t} else {\n\t\t\t\tthis.listeners.get(type).push(callback);\n\t\t\t}\n\t\t}\n\t\t\n\t\treconnect(socket, config) {\n\t\t\tlet _this = this;\n\t\t\tsetTimeout(function() {\n\t\t\t\t_this.create(config);\n\t\t\t}, 1000)\n\t\t}\n\t\t\n\t\tdestroy(socket, key) {\n\t\t\tif (socket) {\n\t\t\t\tsocket.onerror = socket.onopen = socket.onclose = null;\n\t\t\t\tsocket.close();\n\t\t\t\tsocket = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sockets.get(key)) {\n\t\t\t\tthis.sockets.delete(key);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdestroyByKey(key) {\n\t\t\tlet socket = this.sockets.get(key) \n\t\t\tif (socket) {\n\t\t\t\tthis.destroy(socket, key);\n\t\t\t}\n\t\t}\n\t\t\n\t\tgetKey(namespace, room) {\n\t\t\tlet key = `${this.prefix}`;\n\t\t\tif (namespace && namespace != '') {\n\t\t\t\tif (room &&  room != '') {\n\t\t\t\t\tkey += `/${namespace}/${room}`;\n\t\t\t\t} else {\n\t\t\t\t\tkey +=`/${namespace}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn key;\n\t\t}\n\t\t\n\t\tgetByRoom(room) {\n\t\t\tlet key = this.getKeyByRoom(room)\n\t\t\treturn this.sockets.get(key);\t\n\t\t}\n\t\t\n\t\tgetKeyByRoom(room) {\n\t\t\tlet key = this.globalScope;\n\t\t\tif (room) {\n\t\t\t\tkey = `${this.prefix}/${room}`;\n\t\t\t}\n\t\t\treturn key;\t\t\n\t\t}\n\t\t\n\t\t\n\t\tsaveFile(blob) {\n\t\t\tif (wnd.document) {\n\t\t\t\tconst file_name = this.saveFileName || 'downloadFile';\n\t\t\t\tvar a = wnd.document.createElement(\"a\");\n\t\t        wnd.document.body.appendChild(a);\n\t\t        a.style = \"display: none\";\n\t\t\n\t\t        let url = window.URL.createObjectURL(blob);\n\t\t        a.href = url;\n\t\t        a.download = file_name;\n\t\t        a.click();\n\t\t        wnd.URL.revokeObjectURL(url);\n\t\t\n\t\t        this.saveFileName = ''\n\t\t\t}\n\t\t}\n\t\t\n\t\tlistenAsync(eventname) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (wnd.document) { //. browser case\n\t\t\t\t\twnd.document.addEventListener(eventname, function(event) {\n\t\t\t\t\t    resolve(event.detail);\n\t\t\t\t\t}, { once: true })\n\t\t\t\t} else { //. node case\n\t\t\t\t\tprocess.once(eventname, (data) => {\n\t\t\t\t\t\tresolve(data)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n    return CoCreateSocketClient\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/index.js\n")},"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-crud-client/src/crud.js":(module,exports,__webpack_require__)=>{"use strict";eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// import {getCommonParams, getCommonParamsExtend, generateSocketClient} from \"@cocreate/socket-client/src/common-fun.js\"\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client/src/common-fun.js */ \"../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/common-fun.js\"), __webpack_require__(/*! ./utils.crud.js */ \"../../CoCreate-components/CoCreate-crud-client/src/utils.crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (commonFunc, utilsCrud) {\n      return factory(window, commonFunc, utilsCrud);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (wnd, commonFunc, utilsCrud) {\n  const CoCreateCRUD = {\n    socket: null,\n    setSocket: function (socket) {\n      this.socket = socket;\n    },\n\n    readDocumentList(info) {\n      if (!info) return;\n      let request_data = commonFunc.getCommonParams();\n\n      if (!info.collection || !info.operator) {\n        return;\n      }\n\n      request_data = { ...request_data,\n        ...info\n      };\n      this.socket.send('readDocumentList', request_data);\n    },\n\n    createDocument: function (info) {\n      if (info === null) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      let data = info.data || {};\n\n      if (!data['organization_id']) {\n        data['organization_id'] = wnd.config.organization_Id;\n      }\n\n      if (info['data']) {\n        data = { ...data,\n          ...info['data']\n        };\n      } //. rebuild data\n\n\n      request_data['data'] = data;\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('createDocument', request_data, room);\n    },\n    updateDocument: function (info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) return;\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n\n      if (typeof info['data'] === 'object') {\n        request_data['set'] = info['data'];\n      }\n\n      if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n      if (!request_data['set'] && !request_data['unset']) return;\n\n      if (info.broadcast === false) {\n        request_data['broadcast'] = false;\n      }\n      /** socket parameters **/\n\n\n      if (info['broadcast_sender'] === undefined) {\n        request_data['broadcast_sender'] = true;\n      }\n\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('updateDocument', request_data, room);\n    },\n    readDocument: function (info) {\n      if (info === null) {\n        return;\n      }\n\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      console.log(request_data);\n      this.socket.send('readDocument', request_data);\n    },\n    deleteDocument: function (info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('deleteDocument', request_data, room);\n    },\n\n    /** export / import db functions **/\n    exportCollection: function (info) {\n      if (info === null) return;\n      let request_data = commonFunc.getCommonParamsExtend(info);\n      request_data['collection'] = info['collection'];\n      request_data['export_type'] = info['export_type'];\n      request_data['metadata'] = info['metadata'];\n      this.socket.send('exportDB', request_data);\n    },\n    importCollection: function (info) {\n      const {\n        file\n      } = info;\n      if (info === null || !(file instanceof wnd.File)) return;\n      const extension = file.name.split(\".\").pop();\n      if (!['json', 'csv'].some(item => item === extension)) return;\n      let request_data = commonFunc.getCommonParamsExtend(info);\n      request_data['collection'] = info['collection'];\n      request_data['import_type'] = extension;\n      this.socket.send('importDB', request_data);\n      this.socket.sendFile(file);\n    },\n    listen: function (message, fun) {\n      this.socket.listen(message, fun);\n    },\n    listenAsync: function (eventname) {\n      return this.socket.listenAsync(eventname);\n    },\n    createSocket: function (host, namespace) {\n      if (namespace) {\n        this.socket.create({\n          namespace: namespace,\n          room: null,\n          host: host\n        });\n        this.socket.setGlobalScope(namespace);\n      } else {\n        this.socket.create({\n          namespace: null,\n          room: null,\n          host: host\n        });\n      }\n    },\n    ...utilsCrud\n  };\n  return CoCreateCRUD;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud-client/src/crud.js\n")},"../../CoCreate-components/CoCreate-crud-client/src/index.js":(module,exports,__webpack_require__)=>{"use strict";eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client */ \"../../CoCreate-components/CoCreate-crud-client/node_modules/@cocreate/socket-client/src/index.js\"), __webpack_require__(/*! @cocreate/crud-client/src/crud.js */ \"../../CoCreate-components/CoCreate-crud-client/src/crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (CoCreateSocket, CoCreateCRUD) {\n      return factory(true, CoCreateSocket, CoCreateCRUD);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (isBrowser, CoCreateSocket, CoCreateCRUD) {\n  if (isBrowser) {\n    let crud_socket = new CoCreateSocket('ws');\n    CoCreateCRUD.setSocket(crud_socket);\n    CoCreateCRUD.createSocket(window.config.host ? window.config.host : window.location.hostname, window.config.organization_Id);\n  }\n\n  return CoCreateCRUD;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5mdWxsY2FsZW5kYXIvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkLWNsaWVudC9zcmMvaW5kZXguanM/MDY2ZSJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIkNvQ3JlYXRlU29ja2V0IiwiQ29DcmVhdGVDUlVEIiwic2VsZiIsImlzQnJvd3NlciIsImNydWRfc29ja2V0Iiwic2V0U29ja2V0IiwiY3JlYXRlU29ja2V0Iiwid2luZG93IiwiY29uZmlnIiwiaG9zdCIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJvcmdhbml6YXRpb25fSWQiXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDdEIsTUFBSSxJQUFKLEVBQWdEO0FBQzVDQyxxQ0FBTyxDQUFDLHNKQUFELEVBQTRCLDBIQUE1QixDQUFELG1DQUFtRSxVQUFTQyxjQUFULEVBQXlCQyxZQUF6QixFQUF1QztBQUMvRyxhQUFPSCxPQUFPLENBQUMsSUFBRCxFQUFPRSxjQUFQLEVBQXVCQyxZQUF2QixDQUFkO0FBQ0EsS0FGSztBQUFBLGtHQUFOO0FBR0gsR0FKRCxNQUlPLEVBVVI7QUFDRixDQWhCQSxFQWdCQyxPQUFPQyxJQUFQLEtBQWdCLFdBQWhCLEdBQThCQSxJQUE5QixTQWhCRCxFQWdCNEMsVUFBVUMsU0FBVixFQUFxQkgsY0FBckIsRUFBcUNDLFlBQXJDLEVBQW1EO0FBQzlGLE1BQUlFLFNBQUosRUFBZTtBQUNiLFFBQUlDLFdBQVcsR0FBRyxJQUFJSixjQUFKLENBQW1CLElBQW5CLENBQWxCO0FBQ0FDLGdCQUFZLENBQUNJLFNBQWIsQ0FBdUJELFdBQXZCO0FBQ0FILGdCQUFZLENBQUNLLFlBQWIsQ0FBMEJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMENGLE1BQU0sQ0FBQ0csUUFBUCxDQUFnQkMsUUFBcEYsRUFBOEZKLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSSxlQUE1RztBQUNEOztBQUNELFNBQU9YLFlBQVA7QUFDRCxDQXZCQSxDQUFEIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtY3J1ZC1jbGllbnQvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW1wiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIiwgXCJAY29jcmVhdGUvY3J1ZC1jbGllbnQvc3JjL2NydWQuanNcIl0sIGZ1bmN0aW9uKENvQ3JlYXRlU29ja2V0LCBDb0NyZWF0ZUNSVUQpIHtcbiAgICAgICAgXHRyZXR1cm4gZmFjdG9yeSh0cnVlLCBDb0NyZWF0ZVNvY2tldCwgQ29DcmVhdGVDUlVEKVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBsZXQgd25kID0ge1xuICAgICAgICBjb25maWc6IHt9LFxuICAgICAgICBGaWxlOiB7fVxuICAgICAgfVxuICAgICAgY29uc3QgQ29DcmVhdGVDUlVEID0gcmVxdWlyZShcIkBjb2NyZWF0ZS9jcnVkLWNsaWVudC9zcmMvY3J1ZC5qc1wiKVxuICAgICAgY29uc3QgQ29DcmVhdGVTb2NrZXQgPSByZXF1aXJlKFwiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIilcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShmYWxzZSwgQ29DcmVhdGVTb2NrZXQsIENvQ3JlYXRlQ1JVRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSh0cnVlLCByb290W1wiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIl0sIHJvb3RbXCJAY29jcmVhdGUvY3J1ZC1jbGllbnQvc3JjL2NydWQuanNcIl0pO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAoaXNCcm93c2VyLCBDb0NyZWF0ZVNvY2tldCwgQ29DcmVhdGVDUlVEKSB7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBsZXQgY3J1ZF9zb2NrZXQgPSBuZXcgQ29DcmVhdGVTb2NrZXQoJ3dzJyk7XG4gICAgQ29DcmVhdGVDUlVELnNldFNvY2tldChjcnVkX3NvY2tldCk7XG4gICAgQ29DcmVhdGVDUlVELmNyZWF0ZVNvY2tldCh3aW5kb3cuY29uZmlnLmhvc3QgPyB3aW5kb3cuY29uZmlnLmhvc3QgOiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsIHdpbmRvdy5jb25maWcub3JnYW5pemF0aW9uX0lkKVxuICB9IFxuICByZXR1cm4gQ29DcmVhdGVDUlVEO1xufSkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud-client/src/index.js\n")},"../../CoCreate-components/CoCreate-crud-client/src/utils.crud.js":(module,exports)=>{"use strict";eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory();\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function () {\n  function __mergeObject(target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], __mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  }\n\n  function __createObject(data, path) {\n    if (!path) return data;\n    let keys = path.split('.');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  }\n\n  function __createArray(key, data) {\n    try {\n      let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n      if (item && item.length == 3) {\n        let arrayKey = item[1];\n        let index = parseInt(item[2]);\n\n        if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n          data[arrayKey] = [];\n        }\n\n        data[arrayKey][index] = data[key];\n        delete data[key];\n        key = arrayKey;\n      }\n    } catch {\n      console.log('create array error');\n    }\n\n    return key;\n  }\n\n  function isObject(item) {\n    return !!item && item.constructor === Object;\n  }\n\n  function isArray(item) {\n    return !!item && item.constructor === Array;\n  }\n\n  function decodeObject(data) {\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      k = __createArray(k, data);\n\n      if (k.split('.').length > 1) {\n        let newData = __createObject(data[k], k);\n\n        delete data[k];\n        objectData = __mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  }\n\n  function encodeObject(data) {\n    let keys = Object.keys(data);\n    let newData = {};\n    keys.forEach(k => {\n      let data_value = data[k];\n\n      if (isObject(data[k])) {\n        let new_obj = encodeObject(data[k]);\n        let newKeys = Object.keys(new_obj);\n        newKeys.forEach(newKey => {\n          let value = new_obj[newKey];\n          newKey = k + \".\" + newKey;\n          newData[newKey] = value;\n        });\n      } else if (isArray(data_value)) {\n        data_value.forEach((v, index) => {\n          newData[`${k}[${index}]`] = v;\n        });\n      } else {\n        newData[k] = data[k];\n      }\n    });\n    return newData;\n  }\n\n  function getAttr(el) {\n    if (!el) return;\n    let collection = el.getAttribute('data-collection');\n    let document_id = el.getAttribute('data-document_id');\n    let name = el.getAttribute('name');\n    return {\n      collection,\n      document_id,\n      name\n    };\n  }\n\n  function getFlagAttr(el) {\n    if (!el) return {};\n    let is_realtime = isRealtimeAttr(el);\n    let is_save = isSaveAttr(el);\n    let is_read = isReadAttr(el);\n    let is_update = isUpdateAttr(el);\n    return {\n      is_realtime,\n      is_save,\n      is_read,\n      is_update\n    };\n  }\n\n  const isReadAttr = el => __isValueOfAttr(el, 'data-read_value');\n\n  const isSaveAttr = el => __isValueOfAttr(el, 'data-save_value');\n\n  const isUpdateAttr = el => __isValueOfAttr(el, 'data-update_value'); // const isRealtimeAttr = (el) => ( __isValueOfAttr(el, 'data-realtime'));\n\n\n  const isRealtimeAttr = el => {\n    if (!el) return false;\n    let flag = el.getAttribute('data-realtime') == \"false\" ? false : true;\n    return flag;\n  };\n\n  function __isValueOfAttr(el, attr) {\n    if (!el) return false;\n    let flag = el.getAttribute(attr) === \"false\" ? false : true;\n    return flag;\n  }\n\n  function checkValue(value) {\n    if (!value) return false;\n\n    if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function isJsonString(str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n\n      if (typeof json_data === \"object\" && json_data != null) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function isCRDT(input) {\n    const {\n      collection,\n      document_id,\n      name\n    } = getAttr(input);\n    if (isJsonString(collection)) return false;\n    if (isJsonString(name)) return false;\n\n    if (input.tagName === \"INPUT\" && [\"text\", \"email\", \"tel\", \"url\"].includes(input.type) || input.tagName === \"TEXTAREA\") {\n      if (!name) return false;\n      if (!isRealtimeAttr(input)) return false;\n      if (input.getAttribute(\"data-unique\") === \"true\") return false;\n      if (input.type === 'password') return false;\n      if (!isReadAttr(input)) return false;\n      return true;\n    }\n\n    return false;\n  }\n\n  function checkDocumentId(document_id) {\n    try {\n      if (!document_id) return false;\n      if (document_id.toLowerCase() === \"null\") return false;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  return {\n    decodeObject,\n    encodeObject,\n    getAttr,\n    getFlagAttr,\n    isRealtimeAttr,\n    isReadAttr,\n    isSaveAttr,\n    isUpdateAttr,\n    checkValue,\n    isCRDT,\n    checkDocumentId\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud-client/src/utils.crud.js\n")},"../../CoCreate-components/CoCreate-filter/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../../CoCreate-components/CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../../CoCreate-components/CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateFilter = {\n  items: [],\n  ioInstance: null,\n  moduleAttribues: [],\n  module_items: [],\n\n  /** start init processing **/\n  __init: function () {\n    this.__initIntesection();\n\n    this.__initSocket();\n\n    this.__initEvents();\n  },\n  __initIntesection: function () {\n    const self = this;\n    this.ioInstance = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const attributeInfo = self.__getMainAttribue(entry.target);\n\n          if (attributeInfo.id) {\n            document.dispatchEvent(new CustomEvent('CoCreateFilter-loadMore', {\n              detail: {\n                attrName: attributeInfo.name,\n                attrId: attributeInfo.id\n              }\n            }));\n          }\n\n          self.ioInstance.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 1\n    });\n  },\n  __runLoadMore: function (attrName, id) {\n    if (!id || !attrName) return;\n    let item = this.items.find(item => item.attrName === attrName && item.id === id);\n    if (!item) return;\n\n    if (item.count > 0) {\n      this.fetchData(item);\n    }\n  },\n  __getMainAttribue: function (el) {\n    const attribute = this.moduleAttribues.find(attr => (el.getAttribute(attr) || \"\") !== \"\");\n\n    if (attribute) {\n      return {\n        name: attribute,\n        id: el.getAttribute(attribute)\n      };\n    } else {\n      return {};\n    }\n  },\n  __initSocket: function () {\n    const self = this;\n\n    _crudClient.default.listen('readDocumentList', function (data) {\n      let item_id = data['element'];\n      let item = self.items.find(item => item.id === item_id);\n\n      if (item) {\n        // eObj.startIndex += data.result.length;\n        const result_data = data['data']; //. set the intersection observe element\n\n        let element = document.querySelector(`[${item.attrName}=\"${item.id}\"][data-fetch_type=\"scroll\"]`);\n\n        if (result_data.length > 0 && element) {\n          self.ioInstance.observe(element);\n        } // /** render total count **/\n\n\n        const totalCount = data['operator'].total;\n        const totalElements = document.querySelectorAll(`[${item.attrName}=\"${item.id}\"][data-fetch_type=\"total\"]`);\n\n        if (totalElements) {\n          totalElements.forEach(el => el.innerHTML = totalCount);\n        }\n      }\n    });\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('CoCreateFilter-loadMore', function (event) {\n      const attrId = event.detail.attrId;\n      const attrName = event.detail.attrName;\n\n      self.__runLoadMore(attrName, attrId);\n    });\n    let buttons = document.querySelectorAll('[data-fetch_type=\"loadmore\"]');\n    buttons.forEach(btn => {\n      btn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        const attributeInfo = self.__getMainAttribue(btn);\n\n        if (!attributeInfo.id) return;\n\n        self.__runLoadMore(attributeInfo.attrName, attributeInfo.attrId);\n      });\n    });\n  },\n\n  /** ---  End --- **/\n  setFilter: function (el, mainAttr, type) {\n    if (!mainAttr) {\n      return;\n    }\n\n    let id = el.getAttribute(mainAttr);\n    if (!id) return;\n    if (!this.moduleAttribues.includes(mainAttr)) this.moduleAttribues.push(mainAttr);\n    let collection = el.getAttribute('data-fetch_collection');\n    let fetch_type = el.getAttribute('data-fetch_value_type');\n    let fetch_collection = fetch_type == \"collection\" ? true : false;\n    let order_name = el.getAttribute('data-order_by');\n    let order_type = el.getAttribute('data-order_type') || 'asc';\n    let fetch_count = parseInt(el.getAttribute('data-fetch_count'));\n    let item = {\n      el: el,\n      id: id,\n      eId: id,\n      // + this.items.length,\n      type: type,\n      attrName: mainAttr,\n      collection: collection,\n      startIndex: 0,\n      options: {},\n\n      /** return options **/\n      fetch: {},\n      is_collection: fetch_collection,\n      search: {\n        type: 'or',\n        value: []\n      },\n      orders: [],\n      filters: []\n    };\n\n    if (!isNaN(fetch_count) && fetch_count > 0) {\n      item.count = fetch_count;\n    }\n\n    if (order_name) {\n      item.orders.push({\n        name: order_name,\n        type: order_type == 'asc' ? 1 : -1\n      });\n    }\n\n    this._initFilter(item, id, mainAttr);\n\n    this._initOrder(item, id, mainAttr);\n\n    this.items.push(item);\n\n    this._initInputForm(item, mainAttr);\n\n    this._initExportImport(item, id, mainAttr);\n\n    return item;\n  },\n  _initFilter: function (item, id, attrName) {\n    let filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      let f_el = filter_objs[i];\n      let filter_name = f_el.getAttribute('data-filter_name');\n      let filter_operator = f_el.getAttribute('data-filter_operator') ? f_el.getAttribute('data-filter_operator') : '$contain';\n      let value_type = f_el.getAttribute('data-filter_value_type') ? f_el.getAttribute('data-filter_value_type') : 'string';\n      let filter_type = f_el.getAttribute('data-filter_type');\n      let filter_value = f_el.getAttribute('data-filter_value');\n\n      if (filter_value == null) {\n        continue;\n      }\n\n      if (value_type !== \"raw\") {\n        filter_value = filter_value.replace(/\\s/g, '').split(',');\n      }\n\n      if (!filter_name) {\n        item.search.value = this._makeSearchOption(id, attrName);\n      } else {\n        let idx = this.getFilterByName(item, filter_name, filter_operator);\n\n        if (value_type != 'string') {\n          for (let i = 0; i < filter_value.length; i++) {\n            filter_value[i] = Number(filter_value[i]);\n          }\n        }\n\n        this.insertArrayObject(item.filters, idx, {\n          name: filter_name,\n          value: filter_value,\n          operator: filter_operator,\n          type: filter_type\n        });\n      }\n    }\n  },\n  _initOrder: function (item, id, attrName) {\n    let filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    const _this = this;\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      let f_el = filter_objs[i];\n      let order_name = f_el.getAttribute('data-order_by');\n      let order_value = f_el.getAttribute('value');\n\n      if (!order_name || !order_value) {\n        continue;\n      }\n\n      if (['A', 'BUTTON'].includes(f_el.tagName)) {\n        f_el.addEventListener('click', function () {\n          let name = this.getAttribute('data-order_by');\n          let value = this.getAttribute('value');\n\n          _this._applyOrder(item, name, value);\n\n          if (item.el) {\n            item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n              detail: {\n                type: 'order'\n              }\n            }));\n          }\n        }); //. apply click event\n      } else {\n        this._applyOrder(item, order_name, order_value);\n      }\n    }\n\n    this._initToggleOrderEvent(item, id, attrName);\n  },\n  _initToggleOrderEvent: function (item, id, attrName) {\n    let elements = document.querySelectorAll(`[${attrName}=\"${id}\"][data-toggle_order]`);\n    const self = this;\n    elements.forEach(element => {\n      element.addEventListener('click', function () {\n        let value = this.getAttribute('data-toggle_order') || '';\n        let order_name = this.getAttribute('data-order_by');\n        value = value === 'asc' ? 'desc' : 'asc';\n\n        for (let i = 0; i < elements.length; i++) {\n          if (elements[i] !== element) {\n            elements[i].setAttribute('data-toggle_order', '');\n          }\n        }\n\n        item.orders = [];\n\n        self._applyOrder(item, order_name, value);\n\n        element.setAttribute('data-toggle_order', value);\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'order'\n            }\n          }));\n        }\n      });\n    });\n  },\n  _initExportImport: function (item, id, attrName) {\n    let export_button = document.querySelector(`[data-export_type][${attrName}=\"${id}\"]`);\n    let import_button = document.querySelector(`[data-import=\"true\"][${attrName}=\"${id}\"]`);\n    const self = this;\n\n    if (export_button) {\n      //. export_buttons action\n      export_button.addEventListener('click', function () {\n        if (!item) return;\n        let new_filter = self.makeFetchOptions(item);\n        new_filter.export = {\n          collection: new_filter.collection,\n          type: export_button.getAttribute('data-export_type') || 'json'\n        };\n\n        _crudClient.default.readDocumentList(new_filter);\n      });\n    }\n\n    if (import_button) {\n      //. import button action\n      import_button.addEventListener('click', function () {\n        var input = document.createElement('input');\n        input.type = 'file';\n        if (!item) return;\n        let collection = item.collection; //. or \n        // collection = btn.getAttribute('data-collection');\n\n        input.onchange = e => {\n          var file = e.target.files[0];\n\n          _crudClient.default.importCollection({\n            collection: collection,\n            file: file\n          });\n        };\n\n        input.click();\n      });\n    }\n  },\n  _applyOrder: function (item, name, value) {\n    if (!value) {\n      return;\n    }\n\n    let order_type = 0;\n    let idx = this.getOrderByName(item, name);\n\n    if (value == 'asc') {\n      order_type = 1;\n    } else if (value == 'desc') {\n      order_type = -1;\n    } else {\n      order_type = [];\n    }\n\n    this.insertArrayObject(item.orders, idx, {\n      name: name,\n      type: order_type\n    }, order_type);\n  },\n  changeCollection: function (filter) {\n    let collection = filter.el.getAttribute('data-fetch_collection');\n    filter.collection = collection;\n    filter.startIndex = 0;\n  },\n  _makeSearchOption: function (id, attrName) {\n    let forms = document.querySelectorAll('form[' + attrName + '=' + id + ']');\n    let tmpSelector = '[' + attrName + '=' + id + ']';\n    let otherInputs = document.querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    let template_inputs = [];\n\n    for (let i = 0; i < forms.length; i++) {\n      let form = forms[i];\n      let formInputs = form.querySelectorAll('input, textarea, select');\n      formInputs = Array.prototype.slice.call(formInputs);\n      template_inputs = template_inputs.concat(formInputs);\n    }\n\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    template_inputs = template_inputs.concat(otherInputs);\n    let values = [];\n\n    for (var i = 0; i < template_inputs.length; i++) {\n      let filter_name = template_inputs[i].getAttribute('data-filter_name');\n      let order_name = template_inputs[i].getAttribute('data-order_by');\n      let input = template_inputs[i];\n      let value_type = input.getAttribute('data-value_type') ? input.getAttribute('data-value_type') : 'string';\n      let value = null;\n\n      if (!filter_name && !order_name) {\n        if (input.type == 'checkbox' && !input.checked) {\n          value = null;\n        } else {\n          value = input.value;\n\n          if (value_type != 'string') {\n            value = Number(value);\n          }\n\n          if (value && !values.includes(value)) {\n            values.push(value);\n          }\n        }\n      }\n    }\n\n    return values;\n  },\n  _initInputForm: function (item, attrName) {\n    if (!item) return;\n    let tmpSelector = '[' + attrName + '=\"' + item.id + '\"]';\n    let formInputs = item.el.getRootNode().querySelectorAll('form' + tmpSelector + ' input, form' + tmpSelector + ' textarea, form' + tmpSelector + ' select');\n    let otherInputs = item.el.getRootNode().querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    this.setCheckboxName(item.id, attrName);\n    formInputs = Array.prototype.slice.call(formInputs);\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    formInputs = formInputs.concat(otherInputs); // console.log('input form', tmpSelector);\n\n    for (let i = 0; i < formInputs.length; i++) {\n      let input = formInputs[i];\n      let order_by = input.getAttribute('data-order_by');\n\n      if (order_by) {\n        this._initOrderInput(item, input);\n      } else {\n        this._initFilterInput(item, input, item.id);\n      }\n    }\n  },\n  _initOrderInput: function (item, input) {\n    var _instance = this;\n\n    input.addEventListener('change', function (e) {\n      e.preventDefault();\n      let order_by = this.getAttribute('data-order_by');\n      let order_type = 0;\n\n      let idx = _instance.getOrderByName(item, order_by);\n\n      if (this.value == 'asc') {\n        order_type = 1;\n      } else if (this.value == 'desc') {\n        order_type = -1;\n      } else {\n        order_type = [];\n      }\n\n      _instance.insertArrayObject(item.orders, idx, {\n        name: order_by,\n        type: order_type\n      }, order_type);\n\n      if (item.el) {\n        item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n          detail: {\n            type: 'order'\n          }\n        }));\n      }\n    });\n  },\n  _initFilterInput: function (item, input, id) {\n    var _instance = this;\n\n    var delayTimer;\n    input.addEventListener('input', function (e) {\n      e.preventDefault();\n      let filter_name = this.getAttribute('data-filter_name');\n      let filter_operator = this.getAttribute('data-filter_operator') || '$contain';\n      let filter_type = this.getAttribute('data-filter_type');\n      let value_type = this.getAttribute('data-filter_value_type') || 'string';\n      clearTimeout(delayTimer);\n      delayTimer = setTimeout(function () {\n        if (!filter_name) {\n          item.search.value = _instance._makeSearchOption(id, item.attrName);\n        } else {\n          let idx = _instance.getFilterByName(item, filter_name, filter_operator);\n\n          let inputType = input.type;\n          let filterValue = [];\n\n          if (inputType == 'checkbox') {\n            var inputGroup = document.querySelectorAll(\"input[name=\" + input.name + \"]:checked\");\n\n            for (var i = 0; i < inputGroup.length; i++) {\n              filterValue.push(inputGroup[i].value);\n            }\n          } else if (inputType == 'raido') {} else if (inputType == 'range') {\n            filterValue = [Number(input.min), Number(input.value)];\n          } else {\n            var value = input.value;\n\n            if (value_type != 'string') {\n              value = Number(value);\n            }\n\n            if (value != \"none\") {\n              filterValue = [value];\n            }\n\n            if (value_type === \"raw\") {\n              filterValue = value;\n            }\n          }\n\n          _instance.insertArrayObject(item.filters, idx, {\n            name: filter_name,\n            value: filterValue,\n            operator: filter_operator,\n            type: filter_type\n          });\n        }\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'filter'\n            }\n          }));\n        }\n      }, 500);\n    });\n  },\n  setCheckboxName: function (id, attrName) {\n    var forms = document.querySelectorAll('form[' + attrName + '=\"' + id + '\"]');\n\n    for (var k = 0; k < forms.length; k++) {\n      var elements = forms[k].querySelectorAll('input[type=checkbox], form input[type=radio]');\n\n      for (var i = 0; i < elements.length; i++) {\n        var el_name = elements[i].getAttribute('name');\n        var f_name = elements[i].getAttribute('data-filter_name');\n\n        if (el_name || !f_name) {\n          continue;\n        }\n\n        elements[i].setAttribute('name', \"_\" + id + \"-\" + f_name + \"_\" + k);\n      }\n    }\n  },\n  getFilterByName: function (item, filterName, filterOperator) {\n    for (var i = 0; i < item.filters.length; i++) {\n      var f = item.filters[i];\n\n      if (f.name == filterName && f.operator == filterOperator) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  insertArrayObject: function (data, idx, obj, value) {\n    if (!value) {\n      value = obj.value;\n    }\n\n    if (typeof value == 'object' && value.length == 0) {\n      if (idx != -1) {\n        data.splice(idx, 1);\n      }\n    } else {\n      if (idx != -1) {\n        data[idx] = obj;\n      } else {\n        data.push(obj);\n      }\n    }\n\n    return data;\n  },\n  getOrderByName: function (item, name) {\n    for (var i = 0; i < item.orders.length; i++) {\n      if (item.orders[i].name == name) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  defineEvent: function (item) {\n    item.el.addEventListener('fetchFilterData', function (event) {\n      console.log(event);\n    });\n  },\n  fetchData: function (item) {\n    let json = this.makeFetchOptions(item);\n\n    _crudClient.default.readDocumentList(json);\n  },\n  getObjectByFilterId: function (obj, id) {\n    for (var i = 0; i < obj.length; i++) {\n      let filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.id == id) {\n        return obj[i];\n      }\n    }\n  },\n  getObjectByElement: function (obj, el) {\n    for (var i = 0; i < obj.length; i++) {\n      let filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.el.isSameNode(el)) {\n        return obj[i];\n      }\n    }\n  },\n  makeFetchOptions: function (item) {\n    let json = {\n      \"collection\": item.collection,\n      \"element\": item.eId,\n      \"metadata\": {\n        isRefresh: item.isRefresh\n      },\n      \"operator\": {\n        \"filters\": item.filters,\n        \"orders\": item.orders,\n        \"search\": item.search,\n        \"startIndex\": item.startIndex\n      },\n      \"is_collection\": item.is_collection\n    };\n\n    if (item.count) {\n      json['operator'].count = item.count;\n    }\n\n    return json;\n  },\n  init: function ({\n    name,\n    attribute,\n    callback\n  }) {\n    let elements = document.querySelectorAll(`[data-fetch_collection][${attribute}]`);\n    const self = this;\n    elements.forEach(el => {\n      self.__initFilterElement(el, attribute, name);\n    });\n\n    _crudClient.default.listen('readDocumentList', function (data) {\n      callback.call(null, data);\n    });\n  },\n  __initFilterElement: function (el, attribute, name) {\n    let _id = el.getAttribute(attribute);\n\n    const self = this;\n    if (!_id) return; //. restrict the duplication define\n    // if (this.module_items.some(x => x.name == name && x.id == _id)) {\n    // \treturn;\n    // }\n\n    let filter = this.setFilter(el, attribute, name);\n\n    if (filter) {\n      this.module_items.push({\n        el: el,\n        filter: filter,\n        id: _id,\n        name: name\n      });\n      el.addEventListener('changeFilterInput', function (e) {\n        self.fetchData(filter);\n      });\n      this.fetchData(filter);\n    }\n  }\n};\n\nCoCreateFilter.__init();\n\nvar _default = CoCreateFilter;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-filter/src/index.js\n")},"../../CoCreate-components/CoCreate-logic/src/attributes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../../CoCreate-components/CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../../CoCreate-components/CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../../CoCreate-components/CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateAttributes = {\n  //. key: colleciton.document_id.name,\n  //. example:  \n\n  /** modules.xxxxx.test: [\n   *\t{el: element, attr: 'data-test1'},\n   *\t{el: element, attr: 'data-test2'}\n   * ]\n   * \n   **/\n  mainInfo: {},\n  init: function () {\n    // registerModule('fetch-attributes', this, null, this.getRequest, this.renderAttribute);\n    const self = this;\n\n    _crudClient.default.listen('updateDocument', function (data) {\n      self.render(data);\n    });\n\n    _crudClient.default.listen('readDocument', function (data) {\n      self.render(data);\n    });\n\n    _crudClient.default.listen('connect', function (data) {\n      // self.getRequest()\n      self.__getRequest();\n    });\n  },\n  initElement: function (container) {\n    const requests = this.__getRequest(container);\n\n    if (requests) {\n      requests.forEach(req => {\n        _crudClient.default.readDocument({\n          collection: req['collection'],\n          document_id: req['document_id']\n        });\n      });\n    }\n  },\n  render: function (data) {\n    const collection = data['collection'];\n    const document_id = data['document_id'];\n\n    for (let name in data.data) {\n      const key = this.__makeKey(collection, document_id, name);\n\n      const value = data.data[name];\n\n      if (this.mainInfo[key]) {\n        this.mainInfo[key].forEach(item => {\n          item.el.setAttribute(item.attr, value); // if (item.attr == 'data-collection') {\n          // \trunInitModule('cocreate-text');\t\t\t\t\t\t\n          // } \n\n          item.el.dispatchEvent(new CustomEvent('CoCreateAttribute-run', {\n            eventType: 'rendered',\n            item: item.el\n          }));\n        });\n      }\n    }\n  },\n  setValue: function (element, data) {},\n  __getRequest: function (container) {\n    let fetch_container = container || document;\n    let elements = fetch_container.querySelectorAll('[fetch-for]');\n    let self = this;\n    let requestData = [];\n\n    if (elements.length === 0 && fetch_container != document && fetch_container.hasAttributes('fetch-for')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(el => {\n      //. check\n      const el_collection = el.getAttribute('data-collection');\n      const el_documentId = el.getAttribute('data-document_id');\n      const el_name = el.getAttribute('name');\n      const el_value = el.getAttribute('value');\n      const attributes = el.attributes;\n\n      for (let i = 0; i < attributes.length; i++) {\n        let jsonInfo = self.__jsonParse(attributes[i].value);\n\n        if (jsonInfo) {\n          let collection = jsonInfo['collection'] || el_collection;\n          let document_id = jsonInfo['document_id'] || el_documentId;\n          let name = jsonInfo['name'] || el_name;\n          let value = jsonInfo['value'] || el_value;\n\n          if (jsonInfo['data-pass_id']) {\n            let pass_info = self.__checkPassId(jsonInfo['data-pass_id']);\n\n            if (pass_info) {\n              collection = pass_info.collection;\n              document_id = pass_info.document_id;\n              value = pass_info.value;\n            } else {\n              collection = null;\n              document_id = null;\n              value = null;\n            }\n          }\n\n          const key = self.__makeKey(collection, document_id, name);\n\n          if (collection && document_id && name) {\n            if (!self.mainInfo[key]) {\n              self.mainInfo[key] = [];\n            }\n\n            self.mainInfo[key].push({\n              el: el,\n              attr: attributes[i].name\n            });\n\n            if (!requestData.some(d => d['collection'] === collection && d['document_id'] === document_id)) {\n              requestData.push({\n                collection,\n                document_id\n              });\n            }\n          }\n        }\n      }\n    });\n    return requestData;\n  },\n  __jsonParse: function (str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n\n      if (typeof json_data === 'object' && json_data != null) {\n        return json_data;\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  },\n  __checkPassId: function (pass_id) {\n    var dataParams = localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return null;\n\n    for (var i = 0; i < dataParams.length; i++) {\n      if (dataParams[i].pass_to == pass_id) {\n        return {\n          collection: dataParams[i].collection,\n          document_id: dataParams[i].document_id,\n          value: dataParams[i].value\n        };\n      }\n    }\n\n    return null;\n  },\n  __makeKey: function (collection, document_id, name) {\n    return `${collection}_${document_id}_${name}`;\n  }\n};\nCoCreateAttributes.init();\n\n_observer.default.init({\n  name: 'CoCreateAttributes',\n  observe: ['subtree', 'childList'],\n  include: '[data-for]',\n  callback: function (mutation) {\n    CoCreateAttributes.initElement(mutation.target);\n  }\n});\n\nvar _default = CoCreateAttributes;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-logic/src/attributes.js\n")},"../../CoCreate-components/CoCreate-logic/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../../CoCreate-components/CoCreate-observer/src/index.js\"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ \"../../CoCreate-components/CoCreate-action/src/index.js\"));\n\nvar _attributes = _interopRequireDefault(__webpack_require__(/*! ./attributes.js */ \"../../CoCreate-components/CoCreate-logic/src/attributes.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateLogic = {\n  attributes: _attributes.default,\n  init: function () {\n    this.__initKeys();\n\n    this.__initPassSessionIds();\n\n    this.__initPassParams();\n\n    this.__initPassValueParams(); // this.__initValuePassBtns();\n\n\n    this.__initGetValueInput();\n\n    this.initAtagElement();\n  },\n  // getKeys\n  __initKeys: function () {\n    if (window.localStorage.getItem('apiKey')) {\n      config.apiKey = window.localStorage.getItem('apiKey');\n    }\n\n    if (window.localStorage.getItem('securityKey')) {\n      config.securityKey = window.localStorage.getItem('securityKey');\n    }\n\n    if (window.localStorage.getItem('organization_id')) {\n      config.organization_Id = window.localStorage.getItem('organization_id');\n    }\n  },\n  //. passSessionIds\n  __initPassSessionIds: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let user_id = window.localStorage.getItem('user_id');\n    let adminUI_id = window.localStorage.getItem('adminUI_id');\n    let builderUI_id = window.localStorage.getItem('builderUI_id');\n\n    this.__initPassItems(orgId, \".sessionOrg_Id\", true);\n\n    this.__initPassItems(user_id, \".sessionUser_Id\");\n\n    this.__initPassItems(adminUI_id, \".sessionAdminUI_Id\");\n\n    this.__initPassItems(builderUI_id, \".sessionBuilderUI_Id\");\n  },\n  initElement: function (container) {\n    const self = this;\n    let mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let elements = mainContainer.querySelectorAll('[data-pass_id]');\n    elements = Array.from(elements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-pass_id')) {\n      elements.push(mainContainer);\n    }\n\n    let dataParams = window.localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    elements.forEach(el => {\n      if (_observer.default.getInitialized(el)) {\n        return;\n      }\n\n      const pass_id = el.getAttribute('data-pass_id');\n      const paramObj = dataParams.find(x => x.pass_to == pass_id);\n      if (!paramObj) return;\n      const {\n        collection,\n        document_id,\n        pass_to,\n        prefix\n      } = paramObj;\n\n      _observer.default.setInitialized(el);\n\n      if (el.tagName === \"FORM\" && !el.getAttribute('data-colleciton') && collection) {\n        el.setAttribute('data-colleciton', collection);\n      }\n\n      self.__setPassAttributes(el, paramObj);\n    });\n  },\n  initAtagElement: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      const target = event.target.closest('a, button');\n      if (!target) return;\n\n      if (target.getAttribute('target') === 'modal' && target.getAttribute('data-pass_to')) {\n        event.preventDefault(); // event.stopImmediatePropagation()\n\n        self.setLinkProcess(target);\n        return;\n      }\n\n      const href = target.getAttribute('href');\n\n      if (target.getAttribute('target') !== 'modal') {\n        if (target.hasAttribute('data-actions')) return;\n        if (!self.passSubmitProcess(target)) return;\n        const pass_to = target.getAttribute('data-pass_to');\n\n        if (href) {\n          event.preventDefault();\n          self.storePassData(target);\n          self.openAnother(target);\n        } else {\n          self.storePassData(target);\n\n          if (pass_to) {\n            self.__initPassParams(pass_to);\n          }\n        }\n      }\n    });\n  },\n  //. passParams\n  __initPassParams: function (pass_to) {\n    var dataParams = window.localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    let self = this;\n    dataParams.forEach(function (dataParam) {\n      var param_collection = dataParam.collection;\n      var param_document_id = dataParam.document_id;\n      var param_prefix = dataParam.prefix;\n      var param_pass_to = dataParam.pass_to;\n\n      if (pass_to && param_pass_to != pass_to) {\n        return;\n      }\n\n      var forms = document.querySelectorAll('form');\n      forms.forEach(form => {\n        var pass_id = form.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to && param_collection && param_collection != \"\") {\n          if (!form.getAttribute('data-collection')) {\n            form.setAttribute('data-collection', param_collection);\n          }\n        }\n      });\n      var allTags = document.querySelectorAll('[data-pass_id]');\n      allTags.forEach(tag => {\n        var pass_id = tag.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to) {\n          self.__setPassAttributes(tag, dataParam);\n        }\n      });\n    });\n  },\n  // passValueParams\n  __initPassValueParams: function (contianer) {\n    var valueParams = window.localStorage.getItem('valueParams');\n    valueParams = JSON.parse(valueParams);\n    if (!valueParams || valueParams.length == 0) return;\n    valueParams.forEach(function (valueParam) {\n      var pass_value_to = valueParam.pass_value_to; // var inputs = (contianer || document).querySelectorAll('input, textarea, select');\n\n      var inputs = (contianer || document).querySelectorAll('[data-pass_value_id]');\n      inputs.forEach(input => {\n        let pass_value_id = input.getAttribute('data-pass_value_id');\n\n        if (pass_value_id && pass_value_id == pass_value_to) {\n          if (['INPUT', 'TEXTAREA', 'SELECT'].includes(input.tagName)) {\n            input.value = valueParam.value;\n            if (CoCreate.floatingLabel) CoCreate.floatingLabel.update(input);\n          } else {\n            input.innerHTML = valueParam.value;\n          }\n        }\n      });\n    });\n  },\n  __getPassAttributes: function (element) {\n    return {\n      collection: element.getAttribute('data-pass_collection') || element.getAttribute('data-pass_fetch_collection'),\n      document_id: element.getAttribute('data-pass_document_id'),\n      name: element.getAttribute('data-pass_name'),\n      value: element.getAttribute('data-pass_value'),\n      pass_to: element.getAttribute('data-pass_to'),\n      filter_name: element.getAttribute('data-pass_filter_name'),\n      filter_value: element.getAttribute('data-pass_filter_value'),\n      prefix: element.getAttribute('data-pass_prefix') || \"\"\n    };\n  },\n  __setPassAttributes: function (el, param) {\n    const {\n      collection,\n      document_id,\n      name,\n      value,\n      pass_to,\n      filter_name,\n      filter_value,\n      prefix\n    } = param;\n    const pass_id = el.getAttribute('data-pass_id');\n    const isRefresh = el.hasAttribute('data-pass_refresh') ? true : false;\n    if (pass_id != pass_to) return;\n\n    if (collection) {\n      this.__setAttributeValueOfElement(el, 'data-collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_collection', collection, isRefresh);\n    }\n\n    if (document_id) {\n      this.__setAttributeValueOfElement(el, 'data-document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_document_id', document_id, isRefresh);\n    }\n\n    if (name) {\n      this.__setAttributeValueOfElement(el, 'name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_name', name, isRefresh);\n    }\n\n    if (value) {\n      this.__setAttributeValueOfElement(el, 'value', value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_value', value, isRefresh);\n    }\n\n    if (prefix) {\n      this.__setAttributeValueOfElement(el, 'name', prefix + el.getAttribute('name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', prefix + el.getAttribute('data-fetch_name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_prefix', prefix, isRefresh);\n    }\n\n    if (filter_name) {\n      this.__setAttributeValueOfElement(el, 'data-filter_name', filter_name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_name', filter_name, isRefresh);\n    }\n\n    if (filter_value) {\n      this.__setAttributeValueOfElement(el, 'data-filter_value', filter_value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_value', filter_value, isRefresh);\n    }\n  },\n  __setAttributeValueOfElement: function (el, attrname, value, isRefresh, onlyHas) {\n    if (value) {\n      if (el.hasAttribute(attrname) && onlyHas) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n\n      if (el.hasAttribute(attrname) && (!el.getAttribute(attrname) || isRefresh)) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n    }\n  },\n  //. storePassData\n  storePassData: function (aTag) {\n    let dataParams = [];\n    const self = this;\n\n    let param = this.__getPassAttributes(aTag);\n\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    if (param.pass_to) {\n      dataParams.push(param);\n    }\n\n    let tags = aTag.querySelectorAll('[data-pass_to]');\n    tags.forEach(tag => {\n      let passParam = self.__getPassAttributes(tag);\n\n      if (passParam.pass_to) {\n        dataParams.push(passParam);\n      }\n    });\n    if (dataParams.length > 0) localStorage.setItem('dataParams', JSON.stringify(dataParams));\n  },\n  //. initValuePassBtns\n  __initValuePassBtns: function () {// let forms = document.getElementsByTagName('form');\n    // for (let i=0; i < forms.length; i++) {\n    // \tlet form = forms[i];\n    // \tlet valuePassBtn = form.querySelector('.passValueBtn');\n    // \tif (valuePassBtn) this.__registerValuePassBtnEvent(form, valuePassBtn);\n    // }\n  },\n  __initGetValueInput: function () {\n    var inputs = document.querySelectorAll('input, textarea');\n    let self = this;\n\n    for (var i = 0; i < inputs.length; i++) {\n      var input = inputs[i];\n\n      if (!input.id) {\n        continue;\n      }\n\n      input.addEventListener('input', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n      input.addEventListener('updated_by_fetch', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n    }\n  },\n  //. initValuePassBtn\n  __registerValuePassBtnEvent: function (form, valuePassBtn) {// let self = this;\n    // return;\n    // valuePassBtn.addEventListener('click', function(e) {\n    // \tlet inputs = form.querySelectorAll('input, textarea, select');\n    // \tif (valuePassBtn.hasAttribute('data-actions')) {\n    // \t\treturn;\n    // \t}\n    // \tlet valueParams = [];\n    // \tfor (let i = 0; i < inputs.length; i++) {\n    // \t\tlet input = inputs[i];\n    // \t\tlet pass_value_to = input.getAttribute('data-pass_value_to');\n    // \t\tlet value = input.value;\n    // \t\tif (pass_value_to) {\n    // \t\t\tvalueParams.push({\n    // \t\t\t\tpass_value_to: pass_value_to,\n    // \t\t\t\tvalue: value\n    // \t\t\t})\n    // \t\t}\n    // \t}\n    // \tif (valueParams.length > 0) localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    // \tself.__initPassValueParams();\n    // \tlet aTag = valuePassBtn.querySelector('a');\n    // \tif (aTag) self.setLinkProcess(aTag);\n    // })\n  },\n  passProcessAction: function (btn) {\n    let form = btn.closest('form');\n    if (!form) return;\n    let inputs = form.querySelectorAll('input, textarea, select');\n    let valueParams = [];\n    inputs.forEach(el => {\n      const pass_value_to = el.getAttribute('data-pass_value_to');\n      const value = el.value;\n\n      if (pass_value_to) {\n        valueParams.push({\n          pass_value_to: pass_value_to,\n          value: value\n        });\n      }\n    });\n\n    if (valueParams.length > 0) {\n      window.localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n\n    this.__initPassValueParams(); // let aTag = btn.querySelector('a');\n    // if (aTag) this.setLinkProcess(aTag);\n    //. end event\n\n\n    document.dispatchEvent(new CustomEvent('passValueActionEnd', {\n      detail: {}\n    }));\n  },\n  setDataPassValues: function (values) {\n    const valueParams = [];\n\n    for (let key in values) {\n      valueParams.push({\n        pass_value_to: key,\n        value: values[key]\n      });\n    }\n\n    if (valueParams.length > 0) {\n      window.localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n  },\n  initDataPassValues: function () {\n    window.localStorage.removeItem('valueParams');\n  },\n  //. openAnother\n  openAnother: function (atag) {\n    var href = atag.getAttribute('href');\n    var target = atag.getAttribute('target');\n\n    if (target == \"_blank\") {\n      window.open(href, \"_blank\");\n    } else if (target == \"_window\") {\n      window.open(href, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n    } else {\n      window.open(href, \"_self\");\n    }\n  },\n  //. clickATaginButton\n  setLinkProcess: function (aTag) {\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    const pass_to = aTag.getAttribute('data-pass_to');\n    const href = aTag.getAttribute('href');\n    this.storePassData(aTag);\n\n    if (this.checkOpenCocreateModal(aTag)) {\n      if (typeof CoCreate.modal !== 'undefined') {\n        CoCreate.modal.open(aTag);\n      }\n    } else if (href) {\n      this.openAnother(aTag);\n    } else if (pass_to) {\n      this.__initPassParams(pass_to);\n    }\n  },\n  checkOpenCocreateModal: function (atag) {\n    if (atag.getAttribute('target') === \"modal\") {\n      return true;\n    }\n\n    return false;\n  },\n  passSubmitProcess: function (element) {\n    if (element.parentNode.classList.contains('submitBtn')) {\n      if (element.getAttribute('data-pass_to') && element.getAttribute('data-pass_document_id')) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  },\n  __setGetValueProcess: function (id, value) {\n    if (!id) return;\n    var targets = document.querySelectorAll('[data-get_value=\"' + id + '\"]');\n    targets.forEach(target => {\n      // target.value = value;\n      if (typeof target.value != \"undefined\") {\n        target.value = value;\n      } else if (typeof target.textContent != \"undefined\") {\n        target.textContent = value;\n      }\n\n      if (CoCreate.floatingLabel) CoCreate.floatingLabel.update(target);\n      target.dispatchEvent(new Event(\"input\", {\n        \"bubbles\": true\n      }));\n\n      if (target.classList.contains('searchInput')) {\n        let evt = new KeyboardEvent('keydown', {\n          'keyCode': 13\n        });\n        target.dispatchEvent(evt);\n      }\n    });\n  },\n  __initPassItems: function (id, selector, noFetch) {\n    const self = this;\n\n    if (id) {\n      let elements = document.querySelectorAll(selector);\n      elements.forEach(el => {\n        self.__setAttributeValueOfElement(el, 'data-document_id', id); // self.__setAttributeValueOfElement(el, 'data-fetch_document_id', id);\n\n\n        self.__setAttributeValueOfElement(el, 'data-filter_value', id);\n      });\n    }\n  }\n};\nCoCreateLogic.init();\n\n_observer.default.init({\n  name: 'CoCreateAttributes',\n  observe: ['subtree', 'childList'],\n  include: '[data-for]',\n  callback: function (mutation) {\n    CoCreateLogic.attributes.initElement(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateLogic',\n  observe: ['subtree', 'childList'],\n  include: '[data-pass_id]',\n  callback: function (mutation) {\n    CoCreateLogic.initElement(mutation.target);\n  }\n});\n\n_action.default.init({\n  action: \"passValueAction\",\n  endEvent: \"passValueActionEnd\",\n  callback: (btn, data) => {\n    CoCreateLogic.passProcessAction(btn);\n  }\n});\n\nvar _default = CoCreateLogic;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5mdWxsY2FsZW5kYXIvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1sb2dpYy9zcmMvaW5kZXguanM/YTllOSJdLCJuYW1lcyI6WyJDb0NyZWF0ZUxvZ2ljIiwiYXR0cmlidXRlcyIsIkNvQ3JlYXRlQXR0cmlidXRlcyIsImluaXQiLCJfX2luaXRLZXlzIiwiX19pbml0UGFzc1Nlc3Npb25JZHMiLCJfX2luaXRQYXNzUGFyYW1zIiwiX19pbml0UGFzc1ZhbHVlUGFyYW1zIiwiX19pbml0R2V0VmFsdWVJbnB1dCIsImluaXRBdGFnRWxlbWVudCIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsIm9yZ0lkIiwidXNlcl9pZCIsImFkbWluVUlfaWQiLCJidWlsZGVyVUlfaWQiLCJfX2luaXRQYXNzSXRlbXMiLCJpbml0RWxlbWVudCIsImNvbnRhaW5lciIsInNlbGYiLCJtYWluQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJoYXNBdHRyaWJ1dGUiLCJwdXNoIiwiZGF0YVBhcmFtcyIsIkpTT04iLCJwYXJzZSIsImxlbmd0aCIsImZvckVhY2giLCJlbCIsIm9ic2VydmVyIiwiZ2V0SW5pdGlhbGl6ZWQiLCJwYXNzX2lkIiwiZ2V0QXR0cmlidXRlIiwicGFyYW1PYmoiLCJmaW5kIiwieCIsInBhc3NfdG8iLCJjb2xsZWN0aW9uIiwiZG9jdW1lbnRfaWQiLCJwcmVmaXgiLCJzZXRJbml0aWFsaXplZCIsInRhZ05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJfX3NldFBhc3NBdHRyaWJ1dGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiY2xvc2VzdCIsInByZXZlbnREZWZhdWx0Iiwic2V0TGlua1Byb2Nlc3MiLCJocmVmIiwicGFzc1N1Ym1pdFByb2Nlc3MiLCJzdG9yZVBhc3NEYXRhIiwib3BlbkFub3RoZXIiLCJkYXRhUGFyYW0iLCJwYXJhbV9jb2xsZWN0aW9uIiwicGFyYW1fZG9jdW1lbnRfaWQiLCJwYXJhbV9wcmVmaXgiLCJwYXJhbV9wYXNzX3RvIiwiZm9ybXMiLCJmb3JtIiwiYWxsVGFncyIsInRhZyIsImNvbnRpYW5lciIsInZhbHVlUGFyYW1zIiwidmFsdWVQYXJhbSIsInBhc3NfdmFsdWVfdG8iLCJpbnB1dHMiLCJpbnB1dCIsInBhc3NfdmFsdWVfaWQiLCJpbmNsdWRlcyIsInZhbHVlIiwiQ29DcmVhdGUiLCJmbG9hdGluZ0xhYmVsIiwidXBkYXRlIiwiaW5uZXJIVE1MIiwiX19nZXRQYXNzQXR0cmlidXRlcyIsImVsZW1lbnQiLCJuYW1lIiwiZmlsdGVyX25hbWUiLCJmaWx0ZXJfdmFsdWUiLCJwYXJhbSIsImlzUmVmcmVzaCIsIl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQiLCJhdHRybmFtZSIsIm9ubHlIYXMiLCJhVGFnIiwidGFncyIsInBhc3NQYXJhbSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJfX2luaXRWYWx1ZVBhc3NCdG5zIiwiaSIsImlkIiwiZSIsIl9fc2V0R2V0VmFsdWVQcm9jZXNzIiwiX19yZWdpc3RlclZhbHVlUGFzc0J0bkV2ZW50IiwidmFsdWVQYXNzQnRuIiwicGFzc1Byb2Nlc3NBY3Rpb24iLCJidG4iLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzZXREYXRhUGFzc1ZhbHVlcyIsInZhbHVlcyIsImtleSIsImluaXREYXRhUGFzc1ZhbHVlcyIsInJlbW92ZUl0ZW0iLCJhdGFnIiwib3BlbiIsImNoZWNrT3BlbkNvY3JlYXRlTW9kYWwiLCJtb2RhbCIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInRhcmdldHMiLCJ0ZXh0Q29udGVudCIsIkV2ZW50IiwiZXZ0IiwiS2V5Ym9hcmRFdmVudCIsInNlbGVjdG9yIiwibm9GZXRjaCIsIm9ic2VydmUiLCJpbmNsdWRlIiwiY2FsbGJhY2siLCJtdXRhdGlvbiIsImFjdGlvbiIsImVuZEV2ZW50IiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsYUFBYSxHQUFHO0FBQ3JCQyxZQUFVLEVBQUVDLG1CQURTO0FBR3JCQyxNQUFJLEVBQUUsWUFBVztBQUNoQixTQUFLQyxVQUFMOztBQUNBLFNBQUtDLG9CQUFMOztBQUNBLFNBQUtDLGdCQUFMOztBQUNBLFNBQUtDLHFCQUFMLEdBSmdCLENBS2hCOzs7QUFDQSxTQUFLQyxtQkFBTDs7QUFDQSxTQUFLQyxlQUFMO0FBQ0EsR0FYb0I7QUFhckI7QUFDQUwsWUFBVSxFQUFFLFlBQVc7QUFDdEIsUUFBSU0sTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixRQUE1QixDQUFKLEVBQTJDO0FBQzFDQyxZQUFNLENBQUNDLE1BQVAsR0FBZ0JKLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsUUFBNUIsQ0FBaEI7QUFDQTs7QUFDRCxRQUFJRixNQUFNLENBQUNDLFlBQVAsQ0FBb0JDLE9BQXBCLENBQTRCLGFBQTVCLENBQUosRUFBZ0Q7QUFDL0NDLFlBQU0sQ0FBQ0UsV0FBUCxHQUFxQkwsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixhQUE1QixDQUFyQjtBQUNBOztBQUNELFFBQUlGLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsaUJBQTVCLENBQUosRUFBb0Q7QUFDbkRDLFlBQU0sQ0FBQ0csZUFBUCxHQUF5Qk4sTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixpQkFBNUIsQ0FBekI7QUFDQTtBQUNELEdBeEJvQjtBQTBCckI7QUFDQVAsc0JBQW9CLEVBQUUsWUFBVztBQUNoQyxRQUFJWSxLQUFLLEdBQUdQLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsaUJBQTVCLENBQVo7QUFDQSxRQUFJTSxPQUFPLEdBQUdSLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsU0FBNUIsQ0FBZDtBQUNBLFFBQUlPLFVBQVUsR0FBR1QsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixZQUE1QixDQUFqQjtBQUNBLFFBQUlRLFlBQVksR0FBR1YsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixjQUE1QixDQUFuQjs7QUFFQSxTQUFLUyxlQUFMLENBQXFCSixLQUFyQixFQUErQixnQkFBL0IsRUFBaUQsSUFBakQ7O0FBQ0EsU0FBS0ksZUFBTCxDQUFxQkgsT0FBckIsRUFBZ0MsaUJBQWhDOztBQUNBLFNBQUtHLGVBQUwsQ0FBcUJGLFVBQXJCLEVBQWlDLG9CQUFqQzs7QUFDQSxTQUFLRSxlQUFMLENBQXFCRCxZQUFyQixFQUFrQyxzQkFBbEM7QUFDQSxHQXJDb0I7QUF1Q3JCRSxhQUFXLEVBQUUsVUFBU0MsU0FBVCxFQUFvQjtBQUNoQyxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFFBQUlDLGFBQWEsR0FBR0YsU0FBUyxJQUFJRyxRQUFqQzs7QUFDQSxRQUFJLENBQUNELGFBQWEsQ0FBQ0UsZ0JBQW5CLEVBQXFDO0FBQ3BDO0FBQ0E7O0FBQ0QsUUFBSUMsUUFBUSxHQUFHSCxhQUFhLENBQUNFLGdCQUFkLENBQStCLGdCQUEvQixDQUFmO0FBQ0FDLFlBQVEsR0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdGLFFBQVgsQ0FBWDs7QUFDQSxRQUFJSCxhQUFhLElBQUlDLFFBQWpCLElBQTZCRCxhQUFhLENBQUNNLFlBQWQsQ0FBMkIsY0FBM0IsQ0FBakMsRUFBNkU7QUFDNUVILGNBQVEsQ0FBQ0ksSUFBVCxDQUFjUCxhQUFkO0FBQ0E7O0FBQ0QsUUFBSVEsVUFBVSxHQUFHdkIsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixZQUE1QixDQUFqQjtBQUNBcUIsY0FBVSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsVUFBWCxDQUFiO0FBQ0EsUUFBSSxDQUFDQSxVQUFELElBQWVBLFVBQVUsQ0FBQ0csTUFBWCxJQUFxQixDQUF4QyxFQUEyQztBQUUzQ1IsWUFBUSxDQUFDUyxPQUFULENBQWtCQyxFQUFELElBQVE7QUFDeEIsVUFBSUMsa0JBQVNDLGNBQVQsQ0FBd0JGLEVBQXhCLENBQUosRUFBaUM7QUFDaEM7QUFDQTs7QUFFRCxZQUFNRyxPQUFPLEdBQUdILEVBQUUsQ0FBQ0ksWUFBSCxDQUFnQixjQUFoQixDQUFoQjtBQUNBLFlBQU1DLFFBQVEsR0FBR1YsVUFBVSxDQUFDVyxJQUFYLENBQWdCQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsT0FBRixJQUFhTCxPQUFsQyxDQUFqQjtBQUNBLFVBQUksQ0FBQ0UsUUFBTCxFQUFlO0FBRWYsWUFBTTtBQUFDSSxrQkFBRDtBQUFhQyxtQkFBYjtBQUEwQkYsZUFBMUI7QUFBbUNHO0FBQW5DLFVBQTZDTixRQUFuRDs7QUFDQUosd0JBQVNXLGNBQVQsQ0FBd0JaLEVBQXhCOztBQUVBLFVBQUlBLEVBQUUsQ0FBQ2EsT0FBSCxLQUFlLE1BQWYsSUFBeUIsQ0FBQ2IsRUFBRSxDQUFDSSxZQUFILENBQWdCLGlCQUFoQixDQUExQixJQUFnRUssVUFBcEUsRUFBZ0Y7QUFDL0VULFVBQUUsQ0FBQ2MsWUFBSCxDQUFnQixpQkFBaEIsRUFBbUNMLFVBQW5DO0FBQ0E7O0FBQ0R2QixVQUFJLENBQUM2QixtQkFBTCxDQUF5QmYsRUFBekIsRUFBNkJLLFFBQTdCO0FBR0EsS0FsQkQ7QUFtQkEsR0F6RW9CO0FBMkVyQmxDLGlCQUFlLEVBQUUsWUFBVztBQUMzQixVQUFNZSxJQUFJLEdBQUcsSUFBYjtBQUNBRSxZQUFRLENBQUM0QixnQkFBVCxDQUEwQixPQUExQixFQUFtQyxVQUFTQyxLQUFULEVBQWdCO0FBQ2xELFlBQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDQyxNQUFOLENBQWFDLE9BQWIsQ0FBcUIsV0FBckIsQ0FBZjtBQUNBLFVBQUksQ0FBQ0QsTUFBTCxFQUFjOztBQUVkLFVBQUlBLE1BQU0sQ0FBQ2QsWUFBUCxDQUFvQixRQUFwQixNQUFrQyxPQUFsQyxJQUE2Q2MsTUFBTSxDQUFDZCxZQUFQLENBQW9CLGNBQXBCLENBQWpELEVBQXNGO0FBQ3JGYSxhQUFLLENBQUNHLGNBQU4sR0FEcUYsQ0FFckY7O0FBQ0FsQyxZQUFJLENBQUNtQyxjQUFMLENBQW9CSCxNQUFwQjtBQUNBO0FBQ0E7O0FBRUQsWUFBTUksSUFBSSxHQUFHSixNQUFNLENBQUNkLFlBQVAsQ0FBb0IsTUFBcEIsQ0FBYjs7QUFDQSxVQUFJYyxNQUFNLENBQUNkLFlBQVAsQ0FBb0IsUUFBcEIsTUFBa0MsT0FBdEMsRUFBK0M7QUFDOUMsWUFBSWMsTUFBTSxDQUFDekIsWUFBUCxDQUFvQixjQUFwQixDQUFKLEVBQXlDO0FBQ3pDLFlBQUksQ0FBQ1AsSUFBSSxDQUFDcUMsaUJBQUwsQ0FBdUJMLE1BQXZCLENBQUwsRUFBcUM7QUFDckMsY0FBTVYsT0FBTyxHQUFHVSxNQUFNLENBQUNkLFlBQVAsQ0FBb0IsY0FBcEIsQ0FBaEI7O0FBQ0EsWUFBSWtCLElBQUosRUFBVTtBQUNUTCxlQUFLLENBQUNHLGNBQU47QUFDQWxDLGNBQUksQ0FBQ3NDLGFBQUwsQ0FBbUJOLE1BQW5CO0FBQ0FoQyxjQUFJLENBQUN1QyxXQUFMLENBQWlCUCxNQUFqQjtBQUNBLFNBSkQsTUFJTztBQUNOaEMsY0FBSSxDQUFDc0MsYUFBTCxDQUFtQk4sTUFBbkI7O0FBQ0EsY0FBSVYsT0FBSixFQUFhO0FBQ1p0QixnQkFBSSxDQUFDbEIsZ0JBQUwsQ0FBc0J3QyxPQUF0QjtBQUNBO0FBQ0Q7QUFDRDtBQUVELEtBNUJEO0FBNkJBLEdBMUdvQjtBQTRHckI7QUFDQXhDLGtCQUFnQixFQUFFLFVBQVN3QyxPQUFULEVBQWtCO0FBQ25DLFFBQUliLFVBQVUsR0FBR3ZCLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsWUFBNUIsQ0FBakI7QUFDQXFCLGNBQVUsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdGLFVBQVgsQ0FBYjtBQUVBLFFBQUksQ0FBQ0EsVUFBRCxJQUFlQSxVQUFVLENBQUNHLE1BQVgsSUFBcUIsQ0FBeEMsRUFBMkM7QUFDM0MsUUFBSVosSUFBSSxHQUFHLElBQVg7QUFFQVMsY0FBVSxDQUFDSSxPQUFYLENBQW1CLFVBQVMyQixTQUFULEVBQW9CO0FBQ3RDLFVBQUlDLGdCQUFnQixHQUFHRCxTQUFTLENBQUNqQixVQUFqQztBQUNBLFVBQUltQixpQkFBaUIsR0FBR0YsU0FBUyxDQUFDaEIsV0FBbEM7QUFDQSxVQUFJbUIsWUFBWSxHQUFHSCxTQUFTLENBQUNmLE1BQTdCO0FBQ0EsVUFBSW1CLGFBQWEsR0FBR0osU0FBUyxDQUFDbEIsT0FBOUI7O0FBRUEsVUFBSUEsT0FBTyxJQUFJc0IsYUFBYSxJQUFJdEIsT0FBaEMsRUFBeUM7QUFDeEM7QUFDQTs7QUFFRCxVQUFJdUIsS0FBSyxHQUFHM0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixNQUExQixDQUFaO0FBRUEwQyxXQUFLLENBQUNoQyxPQUFOLENBQWVpQyxJQUFELElBQVU7QUFDdkIsWUFBSTdCLE9BQU8sR0FBRzZCLElBQUksQ0FBQzVCLFlBQUwsQ0FBa0IsY0FBbEIsQ0FBZDs7QUFDQSxZQUFJRCxPQUFPLElBQUlBLE9BQU8sSUFBSTJCLGFBQXRCLElBQXVDSCxnQkFBdkMsSUFBMkRBLGdCQUFnQixJQUFJLEVBQW5GLEVBQXVGO0FBQ3RGLGNBQUksQ0FBQ0ssSUFBSSxDQUFDNUIsWUFBTCxDQUFrQixpQkFBbEIsQ0FBTCxFQUEyQztBQUMxQzRCLGdCQUFJLENBQUNsQixZQUFMLENBQWtCLGlCQUFsQixFQUFxQ2EsZ0JBQXJDO0FBQ0E7QUFDRDtBQUNELE9BUEQ7QUFTQSxVQUFJTSxPQUFPLEdBQUc3QyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGdCQUExQixDQUFkO0FBQ0E0QyxhQUFPLENBQUNsQyxPQUFSLENBQWlCbUMsR0FBRCxJQUFTO0FBQ3hCLFlBQUkvQixPQUFPLEdBQUcrQixHQUFHLENBQUM5QixZQUFKLENBQWlCLGNBQWpCLENBQWQ7O0FBQ0EsWUFBSUQsT0FBTyxJQUFJQSxPQUFPLElBQUkyQixhQUExQixFQUF5QztBQUN4QzVDLGNBQUksQ0FBQzZCLG1CQUFMLENBQXlCbUIsR0FBekIsRUFBOEJSLFNBQTlCO0FBQ0E7QUFDRCxPQUxEO0FBTUEsS0E1QkQ7QUE2QkEsR0FqSm9CO0FBbUpyQjtBQUNBekQsdUJBQXFCLEVBQUUsVUFBU2tFLFNBQVQsRUFBb0I7QUFDMUMsUUFBSUMsV0FBVyxHQUFHaEUsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixhQUE1QixDQUFsQjtBQUNBOEQsZUFBVyxHQUFHeEMsSUFBSSxDQUFDQyxLQUFMLENBQVd1QyxXQUFYLENBQWQ7QUFFQSxRQUFJLENBQUNBLFdBQUQsSUFBZ0JBLFdBQVcsQ0FBQ3RDLE1BQVosSUFBc0IsQ0FBMUMsRUFBNkM7QUFFN0NzQyxlQUFXLENBQUNyQyxPQUFaLENBQW9CLFVBQVNzQyxVQUFULEVBQXFCO0FBQ3hDLFVBQUlDLGFBQWEsR0FBR0QsVUFBVSxDQUFDQyxhQUEvQixDQUR3QyxDQUV4Qzs7QUFDQSxVQUFJQyxNQUFNLEdBQUcsQ0FBQ0osU0FBUyxJQUFJL0MsUUFBZCxFQUF3QkMsZ0JBQXhCLENBQXlDLHNCQUF6QyxDQUFiO0FBRUFrRCxZQUFNLENBQUN4QyxPQUFQLENBQWdCeUMsS0FBRCxJQUFXO0FBQ3pCLFlBQUlDLGFBQWEsR0FBR0QsS0FBSyxDQUFDcEMsWUFBTixDQUFtQixvQkFBbkIsQ0FBcEI7O0FBRUEsWUFBSXFDLGFBQWEsSUFBSUEsYUFBYSxJQUFJSCxhQUF0QyxFQUFxRDtBQUNwRCxjQUFJLENBQUMsT0FBRCxFQUFVLFVBQVYsRUFBc0IsUUFBdEIsRUFBZ0NJLFFBQWhDLENBQXlDRixLQUFLLENBQUMzQixPQUEvQyxDQUFKLEVBQTZEO0FBQzVEMkIsaUJBQUssQ0FBQ0csS0FBTixHQUFjTixVQUFVLENBQUNNLEtBQXpCO0FBQ0EsZ0JBQUlDLFFBQVEsQ0FBQ0MsYUFBYixFQUE0QkQsUUFBUSxDQUFDQyxhQUFULENBQXVCQyxNQUF2QixDQUE4Qk4sS0FBOUI7QUFDNUIsV0FIRCxNQUdPO0FBQ05BLGlCQUFLLENBQUNPLFNBQU4sR0FBa0JWLFVBQVUsQ0FBQ00sS0FBN0I7QUFDQTtBQUNEO0FBQ0QsT0FYRDtBQVlBLEtBakJEO0FBa0JBLEdBNUtvQjtBQThLckJLLHFCQUFtQixFQUFFLFVBQVVDLE9BQVYsRUFBbUI7QUFDdkMsV0FBTztBQUNOeEMsZ0JBQVUsRUFBR3dDLE9BQU8sQ0FBQzdDLFlBQVIsQ0FBcUIsc0JBQXJCLEtBQWdENkMsT0FBTyxDQUFDN0MsWUFBUixDQUFxQiw0QkFBckIsQ0FEdkQ7QUFFTk0saUJBQVcsRUFBR3VDLE9BQU8sQ0FBQzdDLFlBQVIsQ0FBcUIsdUJBQXJCLENBRlI7QUFHTjhDLFVBQUksRUFBR0QsT0FBTyxDQUFDN0MsWUFBUixDQUFxQixnQkFBckIsQ0FIRDtBQUlOdUMsV0FBSyxFQUFHTSxPQUFPLENBQUM3QyxZQUFSLENBQXFCLGlCQUFyQixDQUpGO0FBS05JLGFBQU8sRUFBRXlDLE9BQU8sQ0FBQzdDLFlBQVIsQ0FBcUIsY0FBckIsQ0FMSDtBQU1OK0MsaUJBQVcsRUFBRUYsT0FBTyxDQUFDN0MsWUFBUixDQUFxQix1QkFBckIsQ0FOUDtBQU9OZ0Qsa0JBQVksRUFBRUgsT0FBTyxDQUFDN0MsWUFBUixDQUFxQix3QkFBckIsQ0FQUjtBQVFOTyxZQUFNLEVBQUVzQyxPQUFPLENBQUM3QyxZQUFSLENBQXFCLGtCQUFyQixLQUE0QztBQVI5QyxLQUFQO0FBVUEsR0F6TG9CO0FBMkxyQlcscUJBQW1CLEVBQUUsVUFBU2YsRUFBVCxFQUFhcUQsS0FBYixFQUFvQjtBQUN4QyxVQUFNO0FBQUM1QyxnQkFBRDtBQUFhQyxpQkFBYjtBQUEwQndDLFVBQTFCO0FBQWdDUCxXQUFoQztBQUF1Q25DLGFBQXZDO0FBQWdEMkMsaUJBQWhEO0FBQTZEQyxrQkFBN0Q7QUFBMkV6QztBQUEzRSxRQUFxRjBDLEtBQTNGO0FBQ0EsVUFBTWxELE9BQU8sR0FBR0gsRUFBRSxDQUFDSSxZQUFILENBQWdCLGNBQWhCLENBQWhCO0FBQ0EsVUFBTWtELFNBQVMsR0FBR3RELEVBQUUsQ0FBQ1AsWUFBSCxDQUFnQixtQkFBaEIsSUFBdUMsSUFBdkMsR0FBNkMsS0FBL0Q7QUFFQSxRQUFJVSxPQUFPLElBQUlLLE9BQWYsRUFBd0I7O0FBRXhCLFFBQUlDLFVBQUosRUFBZ0I7QUFDZixXQUFLOEMsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxpQkFBdEMsRUFBeURTLFVBQXpELEVBQXFFNkMsU0FBckU7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyx1QkFBdEMsRUFBK0RTLFVBQS9ELEVBQTJFNkMsU0FBM0U7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyw0QkFBdEMsRUFBb0VTLFVBQXBFLEVBQWdGNkMsU0FBaEY7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxzQkFBdEMsRUFBOERTLFVBQTlELEVBQTBFNkMsU0FBMUU7QUFDQTs7QUFFRCxRQUFJNUMsV0FBSixFQUFpQjtBQUNoQixXQUFLNkMsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxrQkFBdEMsRUFBMERVLFdBQTFELEVBQXVFNEMsU0FBdkU7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyx3QkFBdEMsRUFBZ0VVLFdBQWhFLEVBQTZFNEMsU0FBN0U7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyw2QkFBdEMsRUFBcUVVLFdBQXJFLEVBQWtGNEMsU0FBbEY7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyx1QkFBdEMsRUFBK0RVLFdBQS9ELEVBQTRFNEMsU0FBNUU7QUFDQTs7QUFFRCxRQUFJSixJQUFKLEVBQVU7QUFDVCxXQUFLSyw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLE1BQXRDLEVBQThDa0QsSUFBOUMsRUFBb0RJLFNBQXBEOztBQUNBLFdBQUtDLDRCQUFMLENBQWtDdkQsRUFBbEMsRUFBc0MsaUJBQXRDLEVBQXlEa0QsSUFBekQsRUFBK0RJLFNBQS9EOztBQUNBLFdBQUtDLDRCQUFMLENBQWtDdkQsRUFBbEMsRUFBc0MsZ0JBQXRDLEVBQXdEa0QsSUFBeEQsRUFBOERJLFNBQTlEO0FBQ0E7O0FBRUQsUUFBSVgsS0FBSixFQUFXO0FBQ1YsV0FBS1ksNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxPQUF0QyxFQUErQzJDLEtBQS9DLEVBQXNEVyxTQUF0RDs7QUFDQSxXQUFLQyw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLGlCQUF0QyxFQUF5RDJDLEtBQXpELEVBQWdFVyxTQUFoRTtBQUNBOztBQUVELFFBQUkzQyxNQUFKLEVBQVk7QUFDWCxXQUFLNEMsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxNQUF0QyxFQUE4Q1csTUFBTSxHQUFHWCxFQUFFLENBQUNJLFlBQUgsQ0FBZ0IsTUFBaEIsQ0FBdkQsRUFBZ0ZrRCxTQUFoRixFQUEyRixJQUEzRjs7QUFDQSxXQUFLQyw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLGlCQUF0QyxFQUF5RFcsTUFBTSxHQUFHWCxFQUFFLENBQUNJLFlBQUgsQ0FBZ0IsaUJBQWhCLENBQWxFLEVBQXNHa0QsU0FBdEcsRUFBaUgsSUFBakg7O0FBQ0EsV0FBS0MsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxrQkFBdEMsRUFBMERXLE1BQTFELEVBQWtFMkMsU0FBbEU7QUFDQTs7QUFFRCxRQUFJSCxXQUFKLEVBQWlCO0FBQ2hCLFdBQUtJLDRCQUFMLENBQWtDdkQsRUFBbEMsRUFBc0Msa0JBQXRDLEVBQTBEbUQsV0FBMUQsRUFBdUVHLFNBQXZFOztBQUNBLFdBQUtDLDRCQUFMLENBQWtDdkQsRUFBbEMsRUFBc0MsdUJBQXRDLEVBQStEbUQsV0FBL0QsRUFBNEVHLFNBQTVFO0FBQ0E7O0FBRUQsUUFBSUYsWUFBSixFQUFrQjtBQUNqQixXQUFLRyw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLG1CQUF0QyxFQUEyRG9ELFlBQTNELEVBQXlFRSxTQUF6RTs7QUFDQSxXQUFLQyw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLHdCQUF0QyxFQUFnRW9ELFlBQWhFLEVBQThFRSxTQUE5RTtBQUNBO0FBQ0QsR0ExT29CO0FBNE9yQkMsOEJBQTRCLEVBQUUsVUFBVXZELEVBQVYsRUFBY3dELFFBQWQsRUFBd0JiLEtBQXhCLEVBQStCVyxTQUEvQixFQUEwQ0csT0FBMUMsRUFBbUQ7QUFDaEYsUUFBSWQsS0FBSixFQUFXO0FBQ1YsVUFBSTNDLEVBQUUsQ0FBQ1AsWUFBSCxDQUFnQitELFFBQWhCLEtBQTZCQyxPQUFqQyxFQUEwQztBQUN6Q3pELFVBQUUsQ0FBQ2MsWUFBSCxDQUFnQjBDLFFBQWhCLEVBQTBCYixLQUExQjtBQUNBO0FBQ0E7O0FBQ0QsVUFBSTNDLEVBQUUsQ0FBQ1AsWUFBSCxDQUFnQitELFFBQWhCLE1BQThCLENBQUN4RCxFQUFFLENBQUNJLFlBQUgsQ0FBZ0JvRCxRQUFoQixDQUFELElBQThCRixTQUE1RCxDQUFKLEVBQTRFO0FBQzNFdEQsVUFBRSxDQUFDYyxZQUFILENBQWdCMEMsUUFBaEIsRUFBMEJiLEtBQTFCO0FBQ0E7QUFDQTtBQUNEO0FBQ0QsR0F2UG9CO0FBeVByQjtBQUNBbkIsZUFBYSxFQUFFLFVBQVNrQyxJQUFULEVBQWU7QUFDN0IsUUFBSS9ELFVBQVUsR0FBRyxFQUFqQjtBQUNBLFVBQU1ULElBQUksR0FBRyxJQUFiOztBQUNBLFFBQUltRSxLQUFLLEdBQUcsS0FBS0wsbUJBQUwsQ0FBeUJVLElBQXpCLENBQVo7O0FBRUEsUUFBSUEsSUFBSSxDQUFDakUsWUFBTCxDQUFrQixjQUFsQixDQUFKLEVBQXVDO0FBQ3RDO0FBQ0E7O0FBRUQsUUFBSTRELEtBQUssQ0FBQzdDLE9BQVYsRUFBbUI7QUFDbEJiLGdCQUFVLENBQUNELElBQVgsQ0FBZ0IyRCxLQUFoQjtBQUNBOztBQUVELFFBQUlNLElBQUksR0FBR0QsSUFBSSxDQUFDckUsZ0JBQUwsQ0FBc0IsZ0JBQXRCLENBQVg7QUFFQXNFLFFBQUksQ0FBQzVELE9BQUwsQ0FBY21DLEdBQUQsSUFBUztBQUNyQixVQUFJMEIsU0FBUyxHQUFHMUUsSUFBSSxDQUFDOEQsbUJBQUwsQ0FBeUJkLEdBQXpCLENBQWhCOztBQUNBLFVBQUkwQixTQUFTLENBQUNwRCxPQUFkLEVBQXVCO0FBQ3RCYixrQkFBVSxDQUFDRCxJQUFYLENBQWdCa0UsU0FBaEI7QUFDQTtBQUNELEtBTEQ7QUFNQSxRQUFJakUsVUFBVSxDQUFDRyxNQUFYLEdBQW9CLENBQXhCLEVBQTJCekIsWUFBWSxDQUFDd0YsT0FBYixDQUFxQixZQUFyQixFQUFtQ2pFLElBQUksQ0FBQ2tFLFNBQUwsQ0FBZW5FLFVBQWYsQ0FBbkM7QUFDM0IsR0FoUm9CO0FBbVJyQjtBQUNBb0UscUJBQW1CLEVBQUUsWUFBVyxDQUMvQjtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQSxHQTlSb0I7QUFnU3JCN0YscUJBQW1CLEVBQUUsWUFBVztBQUMvQixRQUFJcUUsTUFBTSxHQUFHbkQsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixpQkFBMUIsQ0FBYjtBQUNBLFFBQUlILElBQUksR0FBRyxJQUFYOztBQUVBLFNBQUssSUFBSThFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd6QixNQUFNLENBQUN6QyxNQUEzQixFQUFtQ2tFLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsVUFBSXhCLEtBQUssR0FBR0QsTUFBTSxDQUFDeUIsQ0FBRCxDQUFsQjs7QUFFQSxVQUFJLENBQUN4QixLQUFLLENBQUN5QixFQUFYLEVBQWU7QUFDaEI7QUFDRTs7QUFFRHpCLFdBQUssQ0FBQ3hCLGdCQUFOLENBQXVCLE9BQXZCLEVBQWdDLFVBQVNrRCxDQUFULEVBQVk7QUFDN0NoRixZQUFJLENBQUNpRixvQkFBTCxDQUEwQixLQUFLRixFQUEvQixFQUFtQyxLQUFLdEIsS0FBeEM7QUFDRSxPQUZEO0FBSUFILFdBQUssQ0FBQ3hCLGdCQUFOLENBQXVCLGtCQUF2QixFQUEyQyxVQUFTa0QsQ0FBVCxFQUFZO0FBQ3hEaEYsWUFBSSxDQUFDaUYsb0JBQUwsQ0FBMEIsS0FBS0YsRUFBL0IsRUFBbUMsS0FBS3RCLEtBQXhDO0FBQ0UsT0FGRDtBQUdEO0FBQ0QsR0FuVG9CO0FBcVRyQjtBQUNBeUIsNkJBQTJCLEVBQUUsVUFBU3BDLElBQVQsRUFBZXFDLFlBQWYsRUFBNkIsQ0FDekQ7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0EsR0F4Vm9CO0FBMFZyQkMsbUJBQWlCLEVBQUUsVUFBU0MsR0FBVCxFQUFjO0FBQ2hDLFFBQUl2QyxJQUFJLEdBQUd1QyxHQUFHLENBQUNwRCxPQUFKLENBQVksTUFBWixDQUFYO0FBQ0EsUUFBSSxDQUFDYSxJQUFMLEVBQVc7QUFFWCxRQUFJTyxNQUFNLEdBQUdQLElBQUksQ0FBQzNDLGdCQUFMLENBQXNCLHlCQUF0QixDQUFiO0FBQ0EsUUFBSStDLFdBQVcsR0FBRyxFQUFsQjtBQUVBRyxVQUFNLENBQUN4QyxPQUFQLENBQWVDLEVBQUUsSUFBSTtBQUNwQixZQUFNc0MsYUFBYSxHQUFHdEMsRUFBRSxDQUFDSSxZQUFILENBQWdCLG9CQUFoQixDQUF0QjtBQUNBLFlBQU11QyxLQUFLLEdBQUczQyxFQUFFLENBQUMyQyxLQUFqQjs7QUFDQSxVQUFJTCxhQUFKLEVBQW1CO0FBQ2xCRixtQkFBVyxDQUFDMUMsSUFBWixDQUFpQjtBQUNoQjRDLHVCQUFhLEVBQUVBLGFBREM7QUFFaEJLLGVBQUssRUFBRUE7QUFGUyxTQUFqQjtBQUlBO0FBQ0QsS0FURDs7QUFXQSxRQUFJUCxXQUFXLENBQUN0QyxNQUFaLEdBQXFCLENBQXpCLEVBQTRCO0FBQzNCMUIsWUFBTSxDQUFDQyxZQUFQLENBQW9Cd0YsT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkNqRSxJQUFJLENBQUNrRSxTQUFMLENBQWUxQixXQUFmLENBQTNDO0FBQ0E7O0FBQ0QsU0FBS25FLHFCQUFMLEdBckJnQyxDQXNCaEM7QUFDQTtBQUVBOzs7QUFDQW1CLFlBQVEsQ0FBQ29GLGFBQVQsQ0FBdUIsSUFBSUMsV0FBSixDQUFnQixvQkFBaEIsRUFBc0M7QUFDNURDLFlBQU0sRUFBRTtBQURvRCxLQUF0QyxDQUF2QjtBQUdBLEdBdlhvQjtBQXlYckJDLG1CQUFpQixFQUFFLFVBQVNDLE1BQVQsRUFBaUI7QUFDbkMsVUFBTXhDLFdBQVcsR0FBRyxFQUFwQjs7QUFDQSxTQUFNLElBQUl5QyxHQUFWLElBQWlCRCxNQUFqQixFQUF5QjtBQUN4QnhDLGlCQUFXLENBQUMxQyxJQUFaLENBQWlCO0FBQ2hCNEMscUJBQWEsRUFBRXVDLEdBREM7QUFFaEJsQyxhQUFLLEVBQUVpQyxNQUFNLENBQUNDLEdBQUQ7QUFGRyxPQUFqQjtBQUlBOztBQUVELFFBQUl6QyxXQUFXLENBQUN0QyxNQUFaLEdBQXFCLENBQXpCLEVBQTRCO0FBQzNCMUIsWUFBTSxDQUFDQyxZQUFQLENBQW9Cd0YsT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkNqRSxJQUFJLENBQUNrRSxTQUFMLENBQWUxQixXQUFmLENBQTNDO0FBQ0E7QUFDRCxHQXJZb0I7QUF1WXJCMEMsb0JBQWtCLEVBQUUsWUFBVztBQUM5QjFHLFVBQU0sQ0FBQ0MsWUFBUCxDQUFvQjBHLFVBQXBCLENBQStCLGFBQS9CO0FBQ0EsR0F6WW9CO0FBMllyQjtBQUNBdEQsYUFBVyxFQUFFLFVBQVN1RCxJQUFULEVBQWU7QUFFM0IsUUFBSTFELElBQUksR0FBRzBELElBQUksQ0FBQzVFLFlBQUwsQ0FBa0IsTUFBbEIsQ0FBWDtBQUNBLFFBQUljLE1BQU0sR0FBRzhELElBQUksQ0FBQzVFLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBYjs7QUFFQSxRQUFJYyxNQUFNLElBQUksUUFBZCxFQUF3QjtBQUN0QjlDLFlBQU0sQ0FBQzZHLElBQVAsQ0FBWTNELElBQVosRUFBa0IsUUFBbEI7QUFDRCxLQUZELE1BRU8sSUFBSUosTUFBTSxJQUFJLFNBQWQsRUFBeUI7QUFDOUI5QyxZQUFNLENBQUM2RyxJQUFQLENBQVkzRCxJQUFaLEVBQWtCLFFBQWxCLEVBQTRCLDZEQUE1QjtBQUNELEtBRk0sTUFFQTtBQUNMbEQsWUFBTSxDQUFDNkcsSUFBUCxDQUFZM0QsSUFBWixFQUFrQixPQUFsQjtBQUNEO0FBQ0QsR0F4Wm9CO0FBMFpyQjtBQUNBRCxnQkFBYyxFQUFFLFVBQVNxQyxJQUFULEVBQWU7QUFFOUIsUUFBR0EsSUFBSSxDQUFDakUsWUFBTCxDQUFrQixjQUFsQixDQUFILEVBQXNDO0FBQ3JDO0FBQ0E7O0FBQ0QsVUFBTWUsT0FBTyxHQUFHa0QsSUFBSSxDQUFDdEQsWUFBTCxDQUFrQixjQUFsQixDQUFoQjtBQUNBLFVBQU1rQixJQUFJLEdBQUdvQyxJQUFJLENBQUN0RCxZQUFMLENBQWtCLE1BQWxCLENBQWI7QUFDQSxTQUFLb0IsYUFBTCxDQUFtQmtDLElBQW5COztBQUNBLFFBQUksS0FBS3dCLHNCQUFMLENBQTRCeEIsSUFBNUIsQ0FBSixFQUF1QztBQUN0QyxVQUFJLE9BQU9kLFFBQVEsQ0FBQ3VDLEtBQWhCLEtBQTBCLFdBQTlCLEVBQTJDO0FBQzFDdkMsZ0JBQVEsQ0FBQ3VDLEtBQVQsQ0FBZUYsSUFBZixDQUFvQnZCLElBQXBCO0FBQ0E7QUFDRCxLQUpELE1BSU8sSUFBSXBDLElBQUosRUFBVTtBQUNoQixXQUFLRyxXQUFMLENBQWlCaUMsSUFBakI7QUFDQSxLQUZNLE1BRUEsSUFBSWxELE9BQUosRUFBYTtBQUNuQixXQUFLeEMsZ0JBQUwsQ0FBc0J3QyxPQUF0QjtBQUNBO0FBQ0QsR0E1YW9CO0FBOGFyQjBFLHdCQUFzQixFQUFFLFVBQVNGLElBQVQsRUFBZTtBQUNyQyxRQUFJQSxJQUFJLENBQUM1RSxZQUFMLENBQWtCLFFBQWxCLE1BQWdDLE9BQXBDLEVBQTZDO0FBQzlDLGFBQU8sSUFBUDtBQUNFOztBQUNELFdBQU8sS0FBUDtBQUNELEdBbmJvQjtBQXFickJtQixtQkFBaUIsRUFBRSxVQUFTMEIsT0FBVCxFQUFrQjtBQUNwQyxRQUFJQSxPQUFPLENBQUNtQyxVQUFSLENBQW1CQyxTQUFuQixDQUE2QkMsUUFBN0IsQ0FBc0MsV0FBdEMsQ0FBSixFQUF3RDtBQUN2RCxVQUFLckMsT0FBTyxDQUFDN0MsWUFBUixDQUFxQixjQUFyQixLQUF3QzZDLE9BQU8sQ0FBQzdDLFlBQVIsQ0FBcUIsdUJBQXJCLENBQTdDLEVBQTRGO0FBQzNGLGVBQU8sSUFBUDtBQUNBLE9BRkQsTUFFTztBQUNOLGVBQU8sS0FBUDtBQUNBO0FBQ0QsS0FORCxNQU1PO0FBQ04sYUFBTyxJQUFQO0FBQ0E7QUFDRCxHQS9ib0I7QUFrY3JCK0Qsc0JBQW9CLEVBQUUsVUFBU0YsRUFBVCxFQUFhdEIsS0FBYixFQUFvQjtBQUV6QyxRQUFJLENBQUNzQixFQUFMLEVBQVM7QUFFVCxRQUFJc0IsT0FBTyxHQUFHbkcsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixzQkFBc0I0RSxFQUF0QixHQUEyQixJQUFyRCxDQUFkO0FBRUFzQixXQUFPLENBQUN4RixPQUFSLENBQWlCbUIsTUFBRCxJQUFZO0FBQzFCO0FBQ0EsVUFBSSxPQUFPQSxNQUFNLENBQUN5QixLQUFkLElBQXdCLFdBQTVCLEVBQXlDO0FBQzFDekIsY0FBTSxDQUFDeUIsS0FBUCxHQUFlQSxLQUFmO0FBQ0UsT0FGRCxNQUVPLElBQUksT0FBT3pCLE1BQU0sQ0FBQ3NFLFdBQWQsSUFBOEIsV0FBbEMsRUFBK0M7QUFDdkR0RSxjQUFNLENBQUNzRSxXQUFQLEdBQXFCN0MsS0FBckI7QUFDRTs7QUFFRCxVQUFJQyxRQUFRLENBQUNDLGFBQWIsRUFBNEJELFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QkMsTUFBdkIsQ0FBOEI1QixNQUE5QjtBQUU1QkEsWUFBTSxDQUFDc0QsYUFBUCxDQUFxQixJQUFJaUIsS0FBSixDQUFVLE9BQVYsRUFBbUI7QUFBQyxtQkFBVTtBQUFYLE9BQW5CLENBQXJCOztBQUVBLFVBQUl2RSxNQUFNLENBQUNtRSxTQUFQLENBQWlCQyxRQUFqQixDQUEwQixhQUExQixDQUFKLEVBQThDO0FBQy9DLFlBQUlJLEdBQUcsR0FBRyxJQUFJQyxhQUFKLENBQWtCLFNBQWxCLEVBQTZCO0FBQUMscUJBQVc7QUFBWixTQUE3QixDQUFWO0FBQ0F6RSxjQUFNLENBQUNzRCxhQUFQLENBQXFCa0IsR0FBckI7QUFDRTtBQUNGLEtBaEJEO0FBaUJBLEdBemRvQjtBQTJkckIzRyxpQkFBZSxFQUFFLFVBQVNrRixFQUFULEVBQWEyQixRQUFiLEVBQXVCQyxPQUF2QixFQUFnQztBQUNoRCxVQUFNM0csSUFBSSxHQUFHLElBQWI7O0FBQ0EsUUFBSStFLEVBQUosRUFBUTtBQUNQLFVBQUkzRSxRQUFRLEdBQUdGLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEJ1RyxRQUExQixDQUFmO0FBQ0F0RyxjQUFRLENBQUNTLE9BQVQsQ0FBaUJDLEVBQUUsSUFBSTtBQUN0QmQsWUFBSSxDQUFDcUUsNEJBQUwsQ0FBa0N2RCxFQUFsQyxFQUFzQyxrQkFBdEMsRUFBMERpRSxFQUExRCxFQURzQixDQUV0Qjs7O0FBQ0EvRSxZQUFJLENBQUNxRSw0QkFBTCxDQUFrQ3ZELEVBQWxDLEVBQXNDLG1CQUF0QyxFQUEyRGlFLEVBQTNEO0FBQ0EsT0FKRDtBQUtBO0FBQ0Q7QUFyZW9CLENBQXRCO0FBeWVBdkcsYUFBYSxDQUFDRyxJQUFkOztBQUVBb0Msa0JBQVNwQyxJQUFULENBQWM7QUFDYnFGLE1BQUksRUFBRSxvQkFETztBQUViNEMsU0FBTyxFQUFFLENBQUMsU0FBRCxFQUFZLFdBQVosQ0FGSTtBQUdiQyxTQUFPLEVBQUUsWUFISTtBQUliQyxVQUFRLEVBQUUsVUFBU0MsUUFBVCxFQUFtQjtBQUM1QnZJLGlCQUFhLENBQUNDLFVBQWQsQ0FBeUJxQixXQUF6QixDQUFxQ2lILFFBQVEsQ0FBQy9FLE1BQTlDO0FBQ0E7QUFOWSxDQUFkOztBQVNBakIsa0JBQVNwQyxJQUFULENBQWM7QUFDYnFGLE1BQUksRUFBRSxlQURPO0FBRWI0QyxTQUFPLEVBQUUsQ0FBQyxTQUFELEVBQVksV0FBWixDQUZJO0FBR2JDLFNBQU8sRUFBRSxnQkFISTtBQUliQyxVQUFRLEVBQUUsVUFBU0MsUUFBVCxFQUFtQjtBQUM1QnZJLGlCQUFhLENBQUNzQixXQUFkLENBQTBCaUgsUUFBUSxDQUFDL0UsTUFBbkM7QUFDQTtBQU5ZLENBQWQ7O0FBU0FnRixnQkFBT3JJLElBQVAsQ0FBWTtBQUNYcUksUUFBTSxFQUFFLGlCQURHO0FBRVhDLFVBQVEsRUFBRSxvQkFGQztBQUdYSCxVQUFRLEVBQUUsQ0FBQ3pCLEdBQUQsRUFBTTZCLElBQU4sS0FBZTtBQUN4QjFJLGlCQUFhLENBQUM0RyxpQkFBZCxDQUFnQ0MsR0FBaEM7QUFDQTtBQUxVLENBQVo7O2VBUWU3RyxhIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtbG9naWMvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9ic2VydmVyIGZyb20gJ0Bjb2NyZWF0ZS9vYnNlcnZlcidcbmltcG9ydCBhY3Rpb24gZnJvbSAnQGNvY3JlYXRlL2FjdGlvbidcbmltcG9ydCBDb0NyZWF0ZUF0dHJpYnV0ZXMgZnJvbSBcIi4vYXR0cmlidXRlcy5qc1wiXG5cbmNvbnN0IENvQ3JlYXRlTG9naWMgPSB7XG5cdGF0dHJpYnV0ZXM6IENvQ3JlYXRlQXR0cmlidXRlcyxcblx0XG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX19pbml0S2V5cygpO1xuXHRcdHRoaXMuX19pbml0UGFzc1Nlc3Npb25JZHMoKTtcblx0XHR0aGlzLl9faW5pdFBhc3NQYXJhbXMoKTtcblx0XHR0aGlzLl9faW5pdFBhc3NWYWx1ZVBhcmFtcygpO1xuXHRcdC8vIHRoaXMuX19pbml0VmFsdWVQYXNzQnRucygpO1xuXHRcdHRoaXMuX19pbml0R2V0VmFsdWVJbnB1dCgpO1xuXHRcdHRoaXMuaW5pdEF0YWdFbGVtZW50KCk7XG5cdH0sXG5cdFx0XG5cdC8vIGdldEtleXNcblx0X19pbml0S2V5czogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXBpS2V5JykpIHtcblx0XHRcdGNvbmZpZy5hcGlLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FwaUtleScpO1xuXHRcdH1cblx0XHRpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWN1cml0eUtleScpKSB7XG5cdFx0XHRjb25maWcuc2VjdXJpdHlLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlY3VyaXR5S2V5Jyk7XG5cdFx0fVxuXHRcdGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ29yZ2FuaXphdGlvbl9pZCcpKSB7XG5cdFx0XHRjb25maWcub3JnYW5pemF0aW9uX0lkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvcmdhbml6YXRpb25faWQnKTtcblx0XHR9XG5cdH0sXG5cdFxuXHQvLy4gcGFzc1Nlc3Npb25JZHNcblx0X19pbml0UGFzc1Nlc3Npb25JZHM6IGZ1bmN0aW9uKCkge1xuXHRcdGxldCBvcmdJZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnb3JnYW5pemF0aW9uX2lkJyk7XG5cdFx0bGV0IHVzZXJfaWQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJfaWQnKTtcblx0XHRsZXQgYWRtaW5VSV9pZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWRtaW5VSV9pZCcpO1xuXHRcdGxldCBidWlsZGVyVUlfaWQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J1aWxkZXJVSV9pZCcpO1xuXG5cdFx0dGhpcy5fX2luaXRQYXNzSXRlbXMob3JnSWQsIFx0XHRcdFwiLnNlc3Npb25PcmdfSWRcIiwgdHJ1ZSk7XG5cdFx0dGhpcy5fX2luaXRQYXNzSXRlbXModXNlcl9pZCwgXHRcdFwiLnNlc3Npb25Vc2VyX0lkXCIpO1xuXHRcdHRoaXMuX19pbml0UGFzc0l0ZW1zKGFkbWluVUlfaWQsXHRcIi5zZXNzaW9uQWRtaW5VSV9JZFwiKTtcblx0XHR0aGlzLl9faW5pdFBhc3NJdGVtcyhidWlsZGVyVUlfaWQsXCIuc2Vzc2lvbkJ1aWxkZXJVSV9JZFwiKTtcblx0fSxcblx0XG5cdGluaXRFbGVtZW50OiBmdW5jdGlvbihjb250YWluZXIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRsZXQgbWFpbkNvbnRhaW5lciA9IGNvbnRhaW5lciB8fCBkb2N1bWVudDtcblx0XHRpZiAoIW1haW5Db250YWluZXIucXVlcnlTZWxlY3RvckFsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRsZXQgZWxlbWVudHMgPSBtYWluQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhc3NfaWRdJyk7XG5cdFx0ZWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnRzKTtcblx0XHRpZiAobWFpbkNvbnRhaW5lciAhPSBkb2N1bWVudCAmJiBtYWluQ29udGFpbmVyLmhhc0F0dHJpYnV0ZSgnZGF0YS1wYXNzX2lkJykpIHtcblx0XHRcdGVsZW1lbnRzLnB1c2gobWFpbkNvbnRhaW5lcilcblx0XHR9XG5cdFx0bGV0IGRhdGFQYXJhbXMgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGFQYXJhbXMnKTtcblx0XHRkYXRhUGFyYW1zID0gSlNPTi5wYXJzZShkYXRhUGFyYW1zKTtcblx0XHRpZiAoIWRhdGFQYXJhbXMgfHwgZGF0YVBhcmFtcy5sZW5ndGggPT0gMCkgcmV0dXJuO1xuXHRcdFxuXHRcdGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG5cdFx0XHRpZiAob2JzZXJ2ZXIuZ2V0SW5pdGlhbGl6ZWQoZWwpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uc3QgcGFzc19pZCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX2lkJylcblx0XHRcdGNvbnN0IHBhcmFtT2JqID0gZGF0YVBhcmFtcy5maW5kKHggPT4geC5wYXNzX3RvID09IHBhc3NfaWQpXG5cdFx0XHRpZiAoIXBhcmFtT2JqKSByZXR1cm47XG5cblx0XHRcdGNvbnN0IHtjb2xsZWN0aW9uLCBkb2N1bWVudF9pZCwgcGFzc190bywgcHJlZml4fSA9IHBhcmFtT2JqO1xuXHRcdFx0b2JzZXJ2ZXIuc2V0SW5pdGlhbGl6ZWQoZWwpXG5cdFx0XHRcblx0XHRcdGlmIChlbC50YWdOYW1lID09PSBcIkZPUk1cIiAmJiAhZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbGxlY2l0b24nKSAmJiBjb2xsZWN0aW9uKSB7XG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2xsZWNpdG9uJywgY29sbGVjdGlvbik7XG5cdFx0XHR9XG5cdFx0XHRzZWxmLl9fc2V0UGFzc0F0dHJpYnV0ZXMoZWwsIHBhcmFtT2JqKTtcblxuXG5cdFx0fSk7XG5cdH0sXG5cdFxuXHRpbml0QXRhZ0VsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCdhLCBidXR0b24nKVxuXHRcdFx0aWYgKCF0YXJnZXQpICByZXR1cm47XG5cdFx0XHRcblx0XHRcdGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSA9PT0gJ21vZGFsJyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfdG8nKSkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHQvLyBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRzZWxmLnNldExpbmtQcm9jZXNzKHRhcmdldCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uc3QgaHJlZiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblx0XHRcdGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSAhPT0gJ21vZGFsJykge1xuXHRcdFx0XHRpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1hY3Rpb25zJykpIHJldHVybjtcblx0XHRcdFx0aWYgKCFzZWxmLnBhc3NTdWJtaXRQcm9jZXNzKHRhcmdldCkpIHJldHVybjtcblx0XHRcdFx0Y29uc3QgcGFzc190byA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc190bycpO1xuXHRcdFx0XHRpZiAoaHJlZikge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0c2VsZi5zdG9yZVBhc3NEYXRhKHRhcmdldClcblx0XHRcdFx0XHRzZWxmLm9wZW5Bbm90aGVyKHRhcmdldClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnN0b3JlUGFzc0RhdGEodGFyZ2V0KVxuXHRcdFx0XHRcdGlmIChwYXNzX3RvKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9faW5pdFBhc3NQYXJhbXMocGFzc190byk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KVxuXHR9LFxuXHRcblx0Ly8uIHBhc3NQYXJhbXNcblx0X19pbml0UGFzc1BhcmFtczogZnVuY3Rpb24ocGFzc190bykge1xuXHRcdHZhciBkYXRhUGFyYW1zID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkYXRhUGFyYW1zJyk7XG5cdFx0ZGF0YVBhcmFtcyA9IEpTT04ucGFyc2UoZGF0YVBhcmFtcyk7XG5cblx0XHRpZiAoIWRhdGFQYXJhbXMgfHwgZGF0YVBhcmFtcy5sZW5ndGggPT0gMCkgcmV0dXJuO1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRcblx0XHRkYXRhUGFyYW1zLmZvckVhY2goZnVuY3Rpb24oZGF0YVBhcmFtKSB7XG5cdFx0XHR2YXIgcGFyYW1fY29sbGVjdGlvbiA9IGRhdGFQYXJhbS5jb2xsZWN0aW9uO1xuXHRcdFx0dmFyIHBhcmFtX2RvY3VtZW50X2lkID0gZGF0YVBhcmFtLmRvY3VtZW50X2lkO1xuXHRcdFx0dmFyIHBhcmFtX3ByZWZpeCA9IGRhdGFQYXJhbS5wcmVmaXg7XG5cdFx0XHR2YXIgcGFyYW1fcGFzc190byA9IGRhdGFQYXJhbS5wYXNzX3RvO1xuXHRcdFx0XG5cdFx0XHRpZiAocGFzc190byAmJiBwYXJhbV9wYXNzX3RvICE9IHBhc3NfdG8pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR2YXIgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG5cdFx0XHRcblx0XHRcdGZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcblx0XHRcdFx0dmFyIHBhc3NfaWQgPSBmb3JtLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX2lkJyk7XG5cdFx0XHRcdGlmIChwYXNzX2lkICYmIHBhc3NfaWQgPT0gcGFyYW1fcGFzc190byAmJiBwYXJhbV9jb2xsZWN0aW9uICYmIHBhcmFtX2NvbGxlY3Rpb24gIT0gXCJcIikge1xuXHRcdFx0XHRcdGlmICghZm9ybS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGVjdGlvbicpKSB7XG5cdFx0XHRcdFx0XHRmb3JtLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2xsZWN0aW9uJywgcGFyYW1fY29sbGVjdGlvbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdFx0XHR2YXIgYWxsVGFncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhc3NfaWRdJyk7XG5cdFx0XHRhbGxUYWdzLmZvckVhY2goKHRhZykgPT4ge1xuXHRcdFx0XHR2YXIgcGFzc19pZCA9IHRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19pZCcpO1xuXHRcdFx0XHRpZiAocGFzc19pZCAmJiBwYXNzX2lkID09IHBhcmFtX3Bhc3NfdG8pIHtcblx0XHRcdFx0XHRzZWxmLl9fc2V0UGFzc0F0dHJpYnV0ZXModGFnLCBkYXRhUGFyYW0pXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSlcdFx0XG5cdH0sXG5cdFxuXHQvLyBwYXNzVmFsdWVQYXJhbXNcblx0X19pbml0UGFzc1ZhbHVlUGFyYW1zOiBmdW5jdGlvbihjb250aWFuZXIpIHtcblx0XHR2YXIgdmFsdWVQYXJhbXMgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3ZhbHVlUGFyYW1zJyk7XG5cdFx0dmFsdWVQYXJhbXMgPSBKU09OLnBhcnNlKHZhbHVlUGFyYW1zKTtcblx0XHRcblx0XHRpZiAoIXZhbHVlUGFyYW1zIHx8IHZhbHVlUGFyYW1zLmxlbmd0aCA9PSAwKSByZXR1cm47XG5cdFx0XG5cdFx0dmFsdWVQYXJhbXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZVBhcmFtKSB7XG5cdFx0XHR2YXIgcGFzc192YWx1ZV90byA9IHZhbHVlUGFyYW0ucGFzc192YWx1ZV90bztcblx0XHRcdC8vIHZhciBpbnB1dHMgPSAoY29udGlhbmVyIHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuXHRcdFx0dmFyIGlucHV0cyA9IChjb250aWFuZXIgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhc3NfdmFsdWVfaWRdJyk7XG5cdFx0XHRcblx0XHRcdGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuXHRcdFx0XHRsZXQgcGFzc192YWx1ZV9pZCA9IGlucHV0LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX3ZhbHVlX2lkJyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAocGFzc192YWx1ZV9pZCAmJiBwYXNzX3ZhbHVlX2lkID09IHBhc3NfdmFsdWVfdG8pIHtcblx0XHRcdFx0XHRpZiAoWydJTlBVVCcsICdURVhUQVJFQScsICdTRUxFQ1QnXS5pbmNsdWRlcyhpbnB1dC50YWdOYW1lKSkge1xuXHRcdFx0XHRcdFx0aW5wdXQudmFsdWUgPSB2YWx1ZVBhcmFtLnZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKENvQ3JlYXRlLmZsb2F0aW5nTGFiZWwpIENvQ3JlYXRlLmZsb2F0aW5nTGFiZWwudXBkYXRlKGlucHV0KVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpbnB1dC5pbm5lckhUTUwgPSB2YWx1ZVBhcmFtLnZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVx0ICAgIFx0XG5cdFx0XHR9KVxuXHRcdH0pXHRcdFxuXHR9LFxuXHRcblx0X19nZXRQYXNzQXR0cmlidXRlczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29sbGVjdGlvbiA6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfY29sbGVjdGlvbicpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfZmV0Y2hfY29sbGVjdGlvbicpLFxuXHRcdFx0ZG9jdW1lbnRfaWQgOiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX2RvY3VtZW50X2lkJyksXG5cdFx0XHRuYW1lIDogZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19uYW1lJyksXG5cdFx0XHR2YWx1ZSA6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfdmFsdWUnKSxcblx0XHRcdHBhc3NfdG86IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfdG8nKSxcblx0XHRcdGZpbHRlcl9uYW1lOiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX2ZpbHRlcl9uYW1lJyksXG5cdFx0XHRmaWx0ZXJfdmFsdWU6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfZmlsdGVyX3ZhbHVlJyksXG5cdFx0XHRwcmVmaXg6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfcHJlZml4JykgfHwgXCJcIlxuXHRcdH1cdFxuXHR9LFxuXHRcblx0X19zZXRQYXNzQXR0cmlidXRlczogZnVuY3Rpb24oZWwsIHBhcmFtKSB7XG5cdFx0Y29uc3Qge2NvbGxlY3Rpb24sIGRvY3VtZW50X2lkLCBuYW1lLCB2YWx1ZSwgcGFzc190bywgZmlsdGVyX25hbWUsIGZpbHRlcl92YWx1ZSwgcHJlZml4fSA9IHBhcmFtO1xuXHRcdGNvbnN0IHBhc3NfaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19pZCcpXG5cdFx0Y29uc3QgaXNSZWZyZXNoID0gZWwuaGFzQXR0cmlidXRlKCdkYXRhLXBhc3NfcmVmcmVzaCcpID8gdHJ1ZTogZmFsc2U7XG5cdFx0XG5cdFx0aWYgKHBhc3NfaWQgIT0gcGFzc190bykgcmV0dXJuIDtcblx0XHRcblx0XHRpZiAoY29sbGVjdGlvbikge1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1jb2xsZWN0aW9uJywgY29sbGVjdGlvbiwgaXNSZWZyZXNoKTtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZmV0Y2hfY29sbGVjdGlvbicsIGNvbGxlY3Rpb24sIGlzUmVmcmVzaCk7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICdkYXRhLXBhc3NfZmV0Y2hfY29sbGVjdGlvbicsIGNvbGxlY3Rpb24sIGlzUmVmcmVzaCk7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICdkYXRhLXBhc3NfY29sbGVjdGlvbicsIGNvbGxlY3Rpb24sIGlzUmVmcmVzaCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChkb2N1bWVudF9pZCkge1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1kb2N1bWVudF9pZCcsIGRvY3VtZW50X2lkLCBpc1JlZnJlc2gpO1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1mZXRjaF9kb2N1bWVudF9pZCcsIGRvY3VtZW50X2lkLCBpc1JlZnJlc2gpO1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1wYXNzX2ZldGNoX2RvY3VtZW50X2lkJywgZG9jdW1lbnRfaWQsIGlzUmVmcmVzaCk7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICdkYXRhLXBhc3NfZG9jdW1lbnRfaWQnLCBkb2N1bWVudF9pZCwgaXNSZWZyZXNoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKG5hbWUpIHtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ25hbWUnLCBuYW1lLCBpc1JlZnJlc2gpO1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1mZXRjaF9uYW1lJywgbmFtZSwgaXNSZWZyZXNoKTtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtcGFzc19uYW1lJywgbmFtZSwgaXNSZWZyZXNoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICd2YWx1ZScsIHZhbHVlLCBpc1JlZnJlc2gpO1xuXHRcdFx0dGhpcy5fX3NldEF0dHJpYnV0ZVZhbHVlT2ZFbGVtZW50KGVsLCAnZGF0YS1wYXNzX3ZhbHVlJywgdmFsdWUsIGlzUmVmcmVzaCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChwcmVmaXgpIHtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ25hbWUnLCBwcmVmaXggKyBlbC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSwgaXNSZWZyZXNoLCB0cnVlKTtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZmV0Y2hfbmFtZScsIHByZWZpeCArIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1mZXRjaF9uYW1lJyksIGlzUmVmcmVzaCwgdHJ1ZSk7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICdkYXRhLXBhc3NfcHJlZml4JywgcHJlZml4LCBpc1JlZnJlc2gpO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoZmlsdGVyX25hbWUpIHtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZmlsdGVyX25hbWUnLCBmaWx0ZXJfbmFtZSwgaXNSZWZyZXNoKTtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtcGFzc19maWx0ZXJfbmFtZScsIGZpbHRlcl9uYW1lLCBpc1JlZnJlc2gpO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoZmlsdGVyX3ZhbHVlKSB7XG5cdFx0XHR0aGlzLl9fc2V0QXR0cmlidXRlVmFsdWVPZkVsZW1lbnQoZWwsICdkYXRhLWZpbHRlcl92YWx1ZScsIGZpbHRlcl92YWx1ZSwgaXNSZWZyZXNoKTtcblx0XHRcdHRoaXMuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtcGFzc19maWx0ZXJfdmFsdWUnLCBmaWx0ZXJfdmFsdWUsIGlzUmVmcmVzaCk7XG5cdFx0fVxuXHR9LFxuXHRcblx0X19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudDogZnVuY3Rpb24gKGVsLCBhdHRybmFtZSwgdmFsdWUsIGlzUmVmcmVzaCwgb25seUhhcykge1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aWYgKGVsLmhhc0F0dHJpYnV0ZShhdHRybmFtZSkgJiYgb25seUhhcykge1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoYXR0cm5hbWUsIHZhbHVlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVsLmhhc0F0dHJpYnV0ZShhdHRybmFtZSkgJiYgKCFlbC5nZXRBdHRyaWJ1dGUoYXR0cm5hbWUpIHx8IGlzUmVmcmVzaCkpIHtcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKGF0dHJuYW1lLCB2YWx1ZSk7XG5cdFx0XHRcdHJldHVybiBcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFxuXHQvLy4gc3RvcmVQYXNzRGF0YVxuXHRzdG9yZVBhc3NEYXRhOiBmdW5jdGlvbihhVGFnKSB7XG5cdFx0bGV0IGRhdGFQYXJhbXMgPSBbXTtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRsZXQgcGFyYW0gPSB0aGlzLl9fZ2V0UGFzc0F0dHJpYnV0ZXMoYVRhZyk7XG5cdFx0XG5cdFx0aWYgKGFUYWcuaGFzQXR0cmlidXRlKCdkYXRhLWFjdGlvbnMnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHRpZiAocGFyYW0ucGFzc190bykge1xuXHRcdFx0ZGF0YVBhcmFtcy5wdXNoKHBhcmFtKTtcblx0XHR9XG5cdFx0XG5cdFx0bGV0IHRhZ3MgPSBhVGFnLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhc3NfdG9dJyk7XG5cblx0XHR0YWdzLmZvckVhY2goKHRhZykgPT4ge1xuXHRcdFx0bGV0IHBhc3NQYXJhbSA9IHNlbGYuX19nZXRQYXNzQXR0cmlidXRlcyh0YWcpXG5cdFx0XHRpZiAocGFzc1BhcmFtLnBhc3NfdG8pIHtcblx0XHRcdFx0ZGF0YVBhcmFtcy5wdXNoKHBhc3NQYXJhbSk7XG5cdFx0XHR9XHRcdFx0XG5cdFx0fSlcblx0XHRpZiAoZGF0YVBhcmFtcy5sZW5ndGggPiAwKSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0YVBhcmFtcycsIEpTT04uc3RyaW5naWZ5KGRhdGFQYXJhbXMpKTtcblx0fSxcblx0XG5cblx0Ly8uIGluaXRWYWx1ZVBhc3NCdG5zXG5cdF9faW5pdFZhbHVlUGFzc0J0bnM6IGZ1bmN0aW9uKCkge1xuXHRcdC8vIGxldCBmb3JtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmb3JtJyk7XG5cdFxuXHRcdC8vIGZvciAobGV0IGk9MDsgaSA8IGZvcm1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gXHRsZXQgZm9ybSA9IGZvcm1zW2ldO1xuXHRcdFx0XG5cdFx0Ly8gXHRsZXQgdmFsdWVQYXNzQnRuID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcucGFzc1ZhbHVlQnRuJyk7XG5cdFx0XHRcblx0XHQvLyBcdGlmICh2YWx1ZVBhc3NCdG4pIHRoaXMuX19yZWdpc3RlclZhbHVlUGFzc0J0bkV2ZW50KGZvcm0sIHZhbHVlUGFzc0J0bik7XG5cdFx0Ly8gfVxuXHR9LFxuXHRcblx0X19pbml0R2V0VmFsdWVJbnB1dDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCB0ZXh0YXJlYScpO1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuXHRcdCAgdmFyIGlucHV0ID0gaW5wdXRzW2ldO1xuXHRcdCAgXG5cdFx0ICBpZiAoIWlucHV0LmlkKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHQgIH1cblx0XHQgIFxuXHRcdCAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRzZWxmLl9fc2V0R2V0VmFsdWVQcm9jZXNzKHRoaXMuaWQsIHRoaXMudmFsdWUpXG5cdFx0ICB9KVxuXHRcdCAgXG5cdFx0ICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVkX2J5X2ZldGNoJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0c2VsZi5fX3NldEdldFZhbHVlUHJvY2Vzcyh0aGlzLmlkLCB0aGlzLnZhbHVlKTtcblx0XHQgIH0pXG5cdFx0fVxuXHR9LFxuXHRcblx0Ly8uIGluaXRWYWx1ZVBhc3NCdG5cblx0X19yZWdpc3RlclZhbHVlUGFzc0J0bkV2ZW50OiBmdW5jdGlvbihmb3JtLCB2YWx1ZVBhc3NCdG4pIHtcblx0XHQvLyBsZXQgc2VsZiA9IHRoaXM7XG5cdFx0Ly8gcmV0dXJuO1xuXHRcdC8vIHZhbHVlUGFzc0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHQvLyBcdGxldCBpbnB1dHMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jyk7XG5cdFx0XHRcblx0XHQvLyBcdGlmICh2YWx1ZVBhc3NCdG4uaGFzQXR0cmlidXRlKCdkYXRhLWFjdGlvbnMnKSkge1xuXHRcdC8vIFx0XHRyZXR1cm47XG5cdFx0Ly8gXHR9XG5cdFx0XHRcblx0XHQvLyBcdGxldCB2YWx1ZVBhcmFtcyA9IFtdO1xuXHRcdFx0XG5cdFx0Ly8gXHRmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFx0XHRsZXQgaW5wdXQgPSBpbnB1dHNbaV07XG5cdFx0XHRcdFxuXHRcdC8vIFx0XHRsZXQgcGFzc192YWx1ZV90byA9IGlucHV0LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX3ZhbHVlX3RvJyk7XG5cdFx0Ly8gXHRcdGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuXHRcdFx0XHRcblx0XHQvLyBcdFx0aWYgKHBhc3NfdmFsdWVfdG8pIHtcblx0XHQvLyBcdFx0XHR2YWx1ZVBhcmFtcy5wdXNoKHtcblx0XHQvLyBcdFx0XHRcdHBhc3NfdmFsdWVfdG86IHBhc3NfdmFsdWVfdG8sXG5cdFx0Ly8gXHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHQvLyBcdFx0XHR9KVxuXHRcdC8vIFx0XHR9XG5cdFx0Ly8gXHR9XG5cdFx0XHRcblx0XHQvLyBcdGlmICh2YWx1ZVBhcmFtcy5sZW5ndGggPiAwKSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndmFsdWVQYXJhbXMnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZVBhcmFtcykpO1xuXHRcdFx0XG5cdFx0Ly8gXHRzZWxmLl9faW5pdFBhc3NWYWx1ZVBhcmFtcygpO1xuXHRcdFx0XG5cdFx0Ly8gXHRsZXQgYVRhZyA9IHZhbHVlUGFzc0J0bi5xdWVyeVNlbGVjdG9yKCdhJyk7XG5cdFx0XHRcblx0XHQvLyBcdGlmIChhVGFnKSBzZWxmLnNldExpbmtQcm9jZXNzKGFUYWcpO1xuXHRcdC8vIH0pXG5cdH0sXG5cdFxuXHRwYXNzUHJvY2Vzc0FjdGlvbjogZnVuY3Rpb24oYnRuKSB7XG5cdFx0bGV0IGZvcm0gPSBidG4uY2xvc2VzdCgnZm9ybScpXG5cdFx0aWYgKCFmb3JtKSByZXR1cm47XG5cdFx0XG5cdFx0bGV0IGlucHV0cyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblx0XHRsZXQgdmFsdWVQYXJhbXMgPSBbXTtcblx0XHRcblx0XHRpbnB1dHMuZm9yRWFjaChlbCA9PiB7XG5cdFx0XHRjb25zdCBwYXNzX3ZhbHVlX3RvID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXBhc3NfdmFsdWVfdG8nKTtcblx0XHRcdGNvbnN0IHZhbHVlID0gZWwudmFsdWU7XG5cdFx0XHRpZiAocGFzc192YWx1ZV90bykge1xuXHRcdFx0XHR2YWx1ZVBhcmFtcy5wdXNoKHtcblx0XHRcdFx0XHRwYXNzX3ZhbHVlX3RvOiBwYXNzX3ZhbHVlX3RvLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0XG5cdFx0aWYgKHZhbHVlUGFyYW1zLmxlbmd0aCA+IDApIHtcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndmFsdWVQYXJhbXMnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZVBhcmFtcykpO1xuXHRcdH1cblx0XHR0aGlzLl9faW5pdFBhc3NWYWx1ZVBhcmFtcygpXG5cdFx0Ly8gbGV0IGFUYWcgPSBidG4ucXVlcnlTZWxlY3RvcignYScpO1xuXHRcdC8vIGlmIChhVGFnKSB0aGlzLnNldExpbmtQcm9jZXNzKGFUYWcpO1xuXHRcdFxuXHRcdC8vLiBlbmQgZXZlbnRcblx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgncGFzc1ZhbHVlQWN0aW9uRW5kJywge1xuXHRcdFx0ZGV0YWlsOiB7fVxuXHRcdH0pKVxuXHR9LFxuXHRcblx0c2V0RGF0YVBhc3NWYWx1ZXM6IGZ1bmN0aW9uKHZhbHVlcykge1xuXHRcdGNvbnN0IHZhbHVlUGFyYW1zID0gW11cblx0XHRmb3IgKCBsZXQga2V5IGluIHZhbHVlcykge1xuXHRcdFx0dmFsdWVQYXJhbXMucHVzaCh7XG5cdFx0XHRcdHBhc3NfdmFsdWVfdG86IGtleSxcblx0XHRcdFx0dmFsdWU6IHZhbHVlc1trZXldXG5cdFx0XHR9KVxuXHRcdH1cblx0XHRcblx0XHRpZiAodmFsdWVQYXJhbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd2YWx1ZVBhcmFtcycsIEpTT04uc3RyaW5naWZ5KHZhbHVlUGFyYW1zKSk7XG5cdFx0fVxuXHR9LFxuXHRcblx0aW5pdERhdGFQYXNzVmFsdWVzOiBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3ZhbHVlUGFyYW1zJyk7XHRcblx0fSxcblxuXHQvLy4gb3BlbkFub3RoZXJcblx0b3BlbkFub3RoZXI6IGZ1bmN0aW9uKGF0YWcpIHtcblxuXHRcdHZhciBocmVmID0gYXRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblx0XHR2YXIgdGFyZ2V0ID0gYXRhZy5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuXHRcdFxuXHRcdGlmICh0YXJnZXQgPT0gXCJfYmxhbmtcIikge1xuXHRcdCAgd2luZG93Lm9wZW4oaHJlZiwgXCJfYmxhbmtcIik7ICBcblx0XHR9IGVsc2UgaWYgKHRhcmdldCA9PSBcIl93aW5kb3dcIikge1xuXHRcdCAgd2luZG93Lm9wZW4oaHJlZiwgJ19ibGFuaycsICdsb2NhdGlvbj15ZXMsaGVpZ2h0PTU3MCx3aWR0aD01MjAsc2Nyb2xsYmFycz15ZXMsc3RhdHVzPXllcycpO1xuXHRcdH0gZWxzZSB7XG5cdFx0ICB3aW5kb3cub3BlbihocmVmLCBcIl9zZWxmXCIpO1xuXHRcdH1cblx0fSxcblx0XG5cdC8vLiBjbGlja0FUYWdpbkJ1dHRvblxuXHRzZXRMaW5rUHJvY2VzczogZnVuY3Rpb24oYVRhZykge1xuXHRcdFxuXHRcdGlmKGFUYWcuaGFzQXR0cmlidXRlKCdkYXRhLWFjdGlvbnMnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBwYXNzX3RvID0gYVRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc190bycpO1xuXHRcdGNvbnN0IGhyZWYgPSBhVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuXHRcdHRoaXMuc3RvcmVQYXNzRGF0YShhVGFnKTtcblx0XHRpZiAodGhpcy5jaGVja09wZW5Db2NyZWF0ZU1vZGFsKGFUYWcpKSB7XG5cdFx0XHRpZiAodHlwZW9mIENvQ3JlYXRlLm1vZGFsICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRDb0NyZWF0ZS5tb2RhbC5vcGVuKGFUYWcpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoaHJlZikge1xuXHRcdFx0dGhpcy5vcGVuQW5vdGhlcihhVGFnKTtcblx0XHR9IGVsc2UgaWYgKHBhc3NfdG8pIHtcblx0XHRcdHRoaXMuX19pbml0UGFzc1BhcmFtcyhwYXNzX3RvKTtcblx0XHR9XG5cdH0sXG5cdFxuXHRjaGVja09wZW5Db2NyZWF0ZU1vZGFsOiBmdW5jdGlvbihhdGFnKSB7XG5cdCAgaWYgKGF0YWcuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSA9PT0gXCJtb2RhbFwiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdCAgfSBcblx0ICByZXR1cm4gZmFsc2U7XG5cdH0sXG5cdFxuXHRwYXNzU3VibWl0UHJvY2VzczogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGlmIChlbGVtZW50LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzdWJtaXRCdG4nKSkge1xuXHRcdFx0aWYgKCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXNzX3RvJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19kb2N1bWVudF9pZCcpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSxcblx0XG5cdFxuXHRfX3NldEdldFZhbHVlUHJvY2VzczogZnVuY3Rpb24oaWQsIHZhbHVlKSB7XG5cdFx0XG5cdFx0aWYgKCFpZCkgcmV0dXJuO1xuICBcblx0XHR2YXIgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWdldF92YWx1ZT1cIicgKyBpZCArICdcIl0nKTtcblx0XHRcblx0XHR0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4ge1xuXHRcdCAgLy8gdGFyZ2V0LnZhbHVlID0gdmFsdWU7XG5cdFx0ICBpZiAodHlwZW9mKHRhcmdldC52YWx1ZSkgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dGFyZ2V0LnZhbHVlID0gdmFsdWU7XG5cdFx0ICB9IGVsc2UgaWYgKHR5cGVvZih0YXJnZXQudGV4dENvbnRlbnQpICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHRhcmdldC50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdCAgfVxuXHRcdCAgXG5cdFx0ICBpZiAoQ29DcmVhdGUuZmxvYXRpbmdMYWJlbCkgQ29DcmVhdGUuZmxvYXRpbmdMYWJlbC51cGRhdGUodGFyZ2V0KVxuXHRcdCAgXG5cdFx0ICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7XCJidWJibGVzXCI6dHJ1ZX0pKTsgXG5cdFx0ICBcblx0XHQgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWFyY2hJbnB1dCcpKSB7XG5cdFx0XHRsZXQgZXZ0ID0gbmV3IEtleWJvYXJkRXZlbnQoJ2tleWRvd24nLCB7J2tleUNvZGUnOiAxM30pO1xuXHRcdFx0dGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZ0KTtcblx0XHQgIH1cblx0XHR9KVxuXHR9LFxuXHRcblx0X19pbml0UGFzc0l0ZW1zOiBmdW5jdGlvbihpZCwgc2VsZWN0b3IsIG5vRmV0Y2gpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRpZiAoaWQpIHtcblx0XHRcdGxldCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHRcdFx0ZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG5cdFx0XHRcdHNlbGYuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZG9jdW1lbnRfaWQnLCBpZCk7XG5cdFx0XHRcdC8vIHNlbGYuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZmV0Y2hfZG9jdW1lbnRfaWQnLCBpZCk7XG5cdFx0XHRcdHNlbGYuX19zZXRBdHRyaWJ1dGVWYWx1ZU9mRWxlbWVudChlbCwgJ2RhdGEtZmlsdGVyX3ZhbHVlJywgaWQpO1xuXHRcdFx0fSlcblx0XHR9XG5cdH0sXG59XG5cblxuQ29DcmVhdGVMb2dpYy5pbml0KCk7XG5cbm9ic2VydmVyLmluaXQoeyBcblx0bmFtZTogJ0NvQ3JlYXRlQXR0cmlidXRlcycsIFxuXHRvYnNlcnZlOiBbJ3N1YnRyZWUnLCAnY2hpbGRMaXN0J10sXG5cdGluY2x1ZGU6ICdbZGF0YS1mb3JdJywgXG5cdGNhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikge1xuXHRcdENvQ3JlYXRlTG9naWMuYXR0cmlidXRlcy5pbml0RWxlbWVudChtdXRhdGlvbi50YXJnZXQpXG5cdH1cbn0pO1xuXG5vYnNlcnZlci5pbml0KHsgXG5cdG5hbWU6ICdDb0NyZWF0ZUxvZ2ljJywgXG5cdG9ic2VydmU6IFsnc3VidHJlZScsICdjaGlsZExpc3QnXSxcblx0aW5jbHVkZTogJ1tkYXRhLXBhc3NfaWRdJywgXG5cdGNhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikge1xuXHRcdENvQ3JlYXRlTG9naWMuaW5pdEVsZW1lbnQobXV0YXRpb24udGFyZ2V0KVxuXHR9XG59KTtcblxuYWN0aW9uLmluaXQoe1xuXHRhY3Rpb246IFwicGFzc1ZhbHVlQWN0aW9uXCIsXG5cdGVuZEV2ZW50OiBcInBhc3NWYWx1ZUFjdGlvbkVuZFwiLFxuXHRjYWxsYmFjazogKGJ0biwgZGF0YSkgPT4ge1xuXHRcdENvQ3JlYXRlTG9naWMucGFzc1Byb2Nlc3NBY3Rpb24oYnRuKVxuXHR9LFxufSlcblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVMb2dpYzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-logic/src/index.js\n")},"../../CoCreate-components/CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {};\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    console.log(\' aaaaaaaaaaaaaa observer init \', name); // if (name == \'ccAttribute\' || name == \'ccCss\') {\n\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    } // }\n\n  },\n  remove: function (callback) {\n    this.initTasks.delete(callback);\n    this.attrTasks.delete(callback);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        } // if (el.created) return;\n        // window.counter2++;\n        // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        // window.targets[mutation.target.id || mutation.target.tagName] =\n        //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n        //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n        //   0;\n        // window.attributeName[mutation.attributeName] =\n        //   window.attributeName[mutation.attributeName] != undefined ?\n        //   window.attributeName[mutation.attributeName] + 1 :\n        //   0;\n\n\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    }); // addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          // window.counter2++;\n          // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          // window.targets[mutation.target.id || mutation.target.tagName] =\n          //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n          //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n          //   0;\n          // window.attributeName[mutation.attributeName] =\n          //   window.attributeName[mutation.attributeName] != undefined ?\n          //   window.attributeName[mutation.attributeName] + 1 :\n          //   0;\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-observer/src/index.js\n')},"../../CoCreate-components/CoCreate-utils/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.getParentFromElement = getParentFromElement;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch = configMatch;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n\n\nfunction* configMatch(elementConfig, element) {\n  for (let config of elementConfig) {\n    // if (!Array.isArray(config.selector))\n    //   config.selector = [config.selector];\n    if (config.selector && element.matches(config.selector)) yield config;\n  }\n\n  return;\n} // export function configMatch2(elementConfig, element) {\n//   let result = [];\n//   for (let config of elementConfig) {\n//     if (config.selector && element.matches(config.selector)) result.push(config);\n//   }\n//   return result;\n// }\n// DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nvar _default = {\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  getParentFromElement,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-utils/src/index.js\n')},"./src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../../CoCreate-components/CoCreate-crud-client/src/index.js\"));\n\nvar _filter = _interopRequireDefault(__webpack_require__(/*! @cocreate/filter */ \"../../CoCreate-components/CoCreate-filter/src/index.js\"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../../CoCreate-components/CoCreate-observer/src/index.js\"));\n\nvar _logic = _interopRequireDefault(__webpack_require__(/*! @cocreate/logic */ \"../../CoCreate-components/CoCreate-logic/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar calOBJs = [];\nvar calendarElClass = 'cal-container';\nconst bgColors = ['#09efc6', '#09ef1a', '#efec09', '#ef8609', '#ef6009', '#b609ef', '#ef0986', '#09efec', '#ecef09', '#09a6ef', '#076692', '#c0b507', '#c04807', '#6b07c0', '#72aeb5', '#69811e', '#8d2b23'];\nconst textColors = ['#8c489f', '#f610e5', '#1013f6', '#1079f6', '#109ff6', '#49f610', '#10f679', '#f61013', '#1310f6', '#f65910', '#f8996c', '#3f4af8', '#3fb7f8', '#94f83f', '#8d514a', '#fff', '#72d4dc'];\n\nfunction initSocketsForCalendars() {\n  _crudClient.default.listen('updateDocument', function (data) {\n    updateCalendar(data);\n  });\n\n  _crudClient.default.listen('deleteDocument', function (data) {\n    deleteDocumentForCalendar(data);\n  });\n\n  _crudClient.default.listen('readDocumentList', function (data) {\n    fetchedCalendarData(data);\n  });\n}\n\nfunction fetchedCalendarData(data) {\n  let calObject = _filter.default.getObjectByFilterId(calOBJs, data['element']);\n\n  if (calObject) {\n    renderDataToCalendar(calObject, data);\n  }\n} ///////////////////////////////////////////////////////////////////////\n\n\nfunction initCalendars(container) {\n  let process_container = container || document;\n\n  if (!process_container.querySelectorAll) {\n    return;\n  }\n\n  let calContainers = process_container.querySelectorAll('.' + calendarElClass);\n\n  if (calContainers.length == 0 && process_container != document && process_container.hasAttribute(calendarElClass)) {\n    calContainers = [process_container];\n  }\n\n  for (var i = 0; i < calContainers.length; i++) {\n    var calContainer = calContainers[i];\n    var id = calContainer.id;\n    if (!id) continue;\n    var cal_id = calContainer.getAttribute('data-calendar_id');\n    var displayName = calContainer.getAttribute('data-dispaly_field');\n\n    let filter = _filter.default.setFilter(calContainer, \"data-calendar_id\", \"calendar\");\n\n    if (!filter) continue;\n\n    if (_observer.default.getInitialized(calContainer)) {\n      continue;\n    }\n\n    _observer.default.setInitialized(calContainer);\n\n    var calendar = new FullCalendar.Calendar(calContainer, {\n      plugins: ['interaction', 'dayGrid', 'timeGrid', 'resourceTimeline', 'timeline', 'list'],\n      height: '100%',\n      editable: true,\n      timeZone: 'local',\n      eventResizableFromStart: true,\n      eventLimit: true,\n      selectable: true,\n      selectMirror: true,\n      // contentHeight: 1200,\n      nowIndicator: true,\n      selectMinDistance: 100,\n      header: {\n        left: 'prev,',\n        center: 'title',\n        right: 'next'\n      },\n      defaultView: 'dayGridMonth',\n      // eventRender: function(event, element, view) {\n      //   return $(event.el);\n      // },\n      eventClick: function (info) {\n        eventClicked(info);\n      },\n      eventResize: function (info) {\n        changedEvent(info);\n      },\n      eventDrop: function (info) {\n        changedEvent(info);\n      },\n      select: function (info) {\n        selectedDates(info);\n      }\n    });\n    calendar.render();\n    var calObj = {\n      eId: id,\n      calendar_id: cal_id,\n      calendar: calendar,\n      displayName: displayName,\n      filter: filter\n    };\n    calContainer.addEventListener(\"changeFilterInput\", function (e) {\n      // removeOldData(eObj.el)\n      //. calenar init\n      calObj.filter.startIndex = 0;\n      CoCreate.filter.fetchData(calObj.filter);\n    });\n    CoCreate.filter.fetchData(filter);\n    calOBJs.push(calObj);\n  }\n}\n\nfunction renderDataToCalendar(calObj, data) {\n  var eventSource = new Array();\n  data['data'].forEach(function (item, index) {\n    var newEvent = {};\n    const {\n      bg_color,\n      text_color\n    } = getRandomColor();\n    newEvent.id = item['_id'];\n    newEvent.title = getTitle(item, calObj.displayName);\n    newEvent.textColor = text_color;\n    newEvent.backgroundColor = bg_color;\n    newEvent.start = item.start_date;\n    newEvent.end = convertEndDateForRender(item.end_date, item.end_time, item.allDay);\n    newEvent.allDay = item.allDay;\n    if (item.start_time) newEvent.start += 'T' + item.start_time;\n    if (item.end_time) newEvent.end += 'T' + item.end_time;\n    if (item.start_date && item.end_date) eventSource.push(newEvent);\n  });\n  calObj.calendar.addEventSource(eventSource);\n}\n\nfunction getRandomColor() {\n  var number = Math.floor(Math.random() * bgColors.length);\n  return {\n    bg_color: bgColors[number],\n    text_color: textColors[number]\n  };\n}\n\nfunction getTitle(doc, displayName) {\n  var title = '';\n\n  if (doc[displayName] && displayName) {\n    title = doc[displayName];\n  }\n\n  return title;\n}\n\nfunction updateCalendar(data) {\n  var collection = data['collection'];\n\n  for (var i = 0; i < calOBJs.length; i++) {\n    var calObj = calOBJs[i];\n\n    if (calObj.filter.collection == collection) {\n      var calendar = calObj.calendar;\n      var eventSource = [];\n      var event = calendar.getEventById(data['document_id']);\n\n      if (event) {\n        var start = event.start;\n        var end = event.end;\n        var start_date = getDateString(start);\n        var start_time = getTimeString(start);\n        var end_date = getDateString(end);\n        var end_time = getTimeString(end);\n        var allDay = event.allDay;\n        var backgroundColor = event.backgroundColor;\n        var textColor = event.textColor;\n        const main_data = data['data'];\n\n        for (var key in main_data) {\n          if (key == calObj.displayName) {\n            var newTitle = main_data[key];\n            event.setProp('title', newTitle);\n          }\n\n          if (key == 'start_date') {\n            start_date = main_data[key];\n          }\n\n          if (key == 'end_date') {\n            end_date = main_data[key];\n          }\n\n          if (key == 'start_time') {\n            start_time = main_data[key];\n          }\n\n          if (key == 'end_time') {\n            end_time = main_data[key];\n          }\n\n          if (key === 'allDay') {\n            allDay = main_data[key];\n          }\n        }\n\n        end_date = convertEndDateForRender(end_date, end_time, allDay);\n        event.setAllDay(allDay);\n        event.setStart(start_date + 'T' + start_time);\n        event.setEnd(end_date + 'T' + end_time);\n      } else {\n        let newEvent = createEventItem(data['data'], calObj.displayName);\n\n        if (newEvent) {\n          eventSource.push(newEvent);\n          calendar.addEventSource(eventSource);\n        }\n      }\n    }\n  }\n}\n\nfunction createEventItem(data, displayName) {\n  var newEvent = new Object();\n  const {\n    bg_color,\n    text_color\n  } = getRandomColor();\n  newEvent.id = data['_id'];\n  newEvent.title = getTitle(data, displayName);\n  newEvent.textColor = 'black';\n  newEvent.backgroundColor = bg_color;\n  newEvent.textColor = text_color;\n  newEvent.start = data.start_date;\n  newEvent.end = convertEndDateForRender(data.end_date, data.end_time, data.allDay);\n  newEvent.allDay = data.allDay;\n  if (data.start_time) newEvent.start += 'T' + data.start_time;\n  if (data.end_time) newEvent.end += 'T' + data.end_time;\n\n  if (!data.start_date || !data.end_date) {\n    return null;\n  }\n\n  return newEvent;\n}\n\nfunction deleteDocumentForCalendar(data) {\n  const document_id = data['document_id'];\n\n  for (var i = 0; i < calOBJs.length; i++) {\n    var calObj = calOBJs[i];\n\n    if (calObj.filter.collection == data['collection']) {\n      removeEvent(calObj.calendar, document_id);\n    }\n  }\n}\n\nfunction removeEvent(calendar, id) {\n  var eventSource = calendar.getEventById(id);\n  eventSource.remove();\n}\n\nfunction eventClicked(info) {\n  console.log(info);\n  var event = info.event;\n  var eventId = event.id;\n  var calendar = event._calendar;\n  var cal_el = calendar.el;\n  var eventLink = cal_el.querySelector('.eventLink');\n  let els = eventLink.querySelectorAll(\"[data-pass_document_id]\");\n  els.forEach(el => {\n    if (!el.getAttribute('data-pass_document_id')) {\n      el.setAttribute('data-pass_document_id', eventId);\n    }\n  });\n\n  _logic.default.initDataPassValues();\n\n  _logic.default.setLinkProcess(eventLink);\n}\n\nfunction changedEvent(info) {\n  var event = info.event;\n  var startDate = getDateString(event.start);\n  var endDate = getDateString(event.end);\n  var startTime = getTimeString(event.start);\n  var endTime = getTimeString(event.end);\n  var cal_id = event._calendar.el.id;\n  var calObj = getCalObjById(cal_id);\n\n  if (calObj) {\n    _crudClient.default.updateDocument({\n      'collection': calObj.filter.collection,\n      'element': cal_id,\n      'metadata': \"\",\n      'document_id': event.id,\n      'data': {\n        start_date: startDate,\n        end_date: endDate,\n        start_time: startTime,\n        end_time: endTime\n      }\n    });\n  }\n}\n\nfunction getDateString(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var dt = date.getDate();\n\n  if (dt < 10) {\n    dt = '0' + dt;\n  }\n\n  if (month < 10) {\n    month = '0' + month;\n  }\n\n  return year + '-' + month + '-' + dt;\n}\n\nfunction getTimeString(date) {\n  var hour = date.getHours();\n  var min = date.getMinutes();\n\n  if (hour < 10) {\n    hour = '0' + hour;\n  }\n\n  if (min < 10) {\n    min = '0' + min;\n  }\n\n  return hour + ':' + min;\n}\n\nfunction getCalObjById(id) {\n  for (var i = 0; i < calOBJs.length; i++) {\n    var calObj = calOBJs[i];\n    if (id == calObj.eId) return calObj;\n  }\n\n  return null;\n}\n\nfunction selectedDates(info) {\n  var startDate = getDateString(info.start);\n  var endDate = getDateString(info.end);\n  var startTime = getTimeString(info.start);\n  var endTime = getTimeString(info.end);\n  var cal_id = info.view.calendar.el.id;\n  var calObj = getCalObjById(cal_id);\n\n  if (calObj) {\n    const eventLink = info.view.calendar.el.querySelector('.eventLink');\n    let els = eventLink.querySelectorAll(\"[data-pass_document_id]\");\n    els.forEach(el => {\n      if (!el.getAttribute('data-pass_document_id')) {\n        el.setAttribute('data-pass_document_id', \"\");\n      }\n    });\n\n    _logic.default.setDataPassValues({\n      start_date: startDate,\n      end_date: endDate,\n      start_time: startTime,\n      end_time: endTime\n    });\n\n    _logic.default.setLinkProcess(eventLink);\n  }\n}\n\nfunction initCalendarButtons(container) {\n  let main_container = container || document;\n\n  if (!main_container.querySelectorAll) {\n    return;\n  }\n\n  var btns = main_container.querySelectorAll('[data-calendar_id][data-btn_type]');\n\n  if (btns.length === 0 && main_container != document && main_container.hasAttribute('data-btn_type') && main_container.hasAttribute('data-calendar_id')) {\n    btns = [main_container];\n  }\n\n  for (var i = 0; i < btns.length; i++) {\n    var btn = btns[i];\n\n    if (_observer.default.getInitialized(btn)) {\n      continue;\n    }\n\n    _observer.default.setInitialized(btn);\n\n    btn.addEventListener('click', function (e) {\n      e.preventDefault();\n      var type = this.getAttribute('data-btn_type');\n      var calId = this.getAttribute('data-calendar_id');\n      calendarBtnClicked(calId, type);\n    });\n  }\n}\n\nfunction convertEndDateForRender(end, end_time, allDay) {\n  if (!allDay) {\n    return end;\n  }\n\n  return end;\n  let endDate = new Date(end);\n  endDate.setDate(endDate.getDate() + 1);\n  return endDate.toISOString().split('T')[0];\n}\n\nfunction calendarBtnClicked(calId, type) {\n  if (!calId) return;\n\n  for (var i = 0; i < calOBJs.length; i++) {\n    var calObj = calOBJs[i];\n\n    if (calObj.eId == calId) {\n      var calendar = calObj.calendar;\n      console.log(type);\n\n      switch (type) {\n        case 'dayGridDay':\n          // code\n          calendar.changeView('dayGridDay'); ////   dayGridDay\n\n          break;\n\n        case 'dayGridWeek':\n          // code\n          calendar.changeView('dayGridWeek'); ////  dayGridWeek\n\n          break;\n\n        case 'dayGridMonth':\n          // code\n          calendar.changeView('dayGridMonth'); ///   dayGridMonth\n\n          break;\n\n        case 'resourceTimelineDay':\n          // code\n          calendar.changeView('resourceTimelineDay'); ///   resourceTimelineDay\n\n          break;\n\n        case 'resourceTimelineThreeDays':\n          // code\n          calendar.changeView('resourceTimelineThreeDays'); ///   resourceTimelineThreeDays\n\n          break;\n\n        case 'resourceTimelineFiveDays':\n          // code\n          calendar.changeView('resourceTimelineFiveDays'); ///   resourceTimelineFiveDays\n\n          break;\n\n        case 'timeGridWeek':\n          // code\n          calendar.changeView('timeGridWeek'); ///   timeGridWeek\n\n          break;\n\n        case 'timeGridDay':\n          // code\n          calendar.changeView('timeGridDay'); ///   timeGridDay\n\n          break;\n\n        case 'listDay':\n          // code\n          calendar.changeView('listDay'); ///   listDay\n\n          break;\n\n        case 'listWeek':\n          // code\n          calendar.changeView('listWeek'); ///   listWeek\n\n          break;\n\n        case 'listMonth':\n          // code\n          calendar.changeView('listMonth'); ///   listMonth\n\n          break;\n\n        case 'listYear':\n          // code\n          calendar.changeView('listYear'); ///   listYear\n\n          break;\n\n        case 'timelineWeek':\n          // code\n          calendar.changeView('timelineWeek'); ///   timelineWeek\n\n          break;\n\n        case 'today':\n          // code\n          calendar.today(); ///   today\n\n          break;\n\n        default: // code\n\n      }\n    }\n  }\n}\n/** init **/\n\n\ninitSocketsForCalendars();\ninitCalendars();\ninitCalendarButtons();\n\n_observer.default.register('CoCreateCalendar', window, initCalendars); // CoCreate.observer.init({\n// \tname: 'CoCreateCalendar', \n// \tobserve: ['subtree', 'childList'],\n// \tinclude: '[data-calendar_id]', \n// \tcallback: function(mutation) {\n// \t\tinitCalendars(mutation.target)\n// \t}\n// })\n\n\n_observer.default.register('CoCreateCalendar_btn', window, initCalendarButtons); // CoCreate.observer.init({\n// \tname: 'CoCreateCalendarBtn', \n// \tobserve: ['subtree', 'childList'],\n// \tinclude: '[data-calendar_id][data-btn_type]', \n// \tcallback: function(mutation) {\n// \t\tinitCalendarButtons(mutation.target)\n// \t}\n// })//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));